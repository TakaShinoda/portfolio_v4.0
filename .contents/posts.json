[{"title":"Supabaseで認証機能を作ってみる","contentSnippet":"はじめにこの記事は 弁護士ドットコム Advent Calendar 2021 の 18 日目の記事です。前日は、@komtaki さんの「GitHub Actions と semantic-release で、自動で高品質 npm パッケージを一般公開する」でした！こんにちは。クラウドサイン事業本部 プロダクト部の@tttttt_621_sです。私は、個人開発の際に Firebase を使うことがあるのですが、最近 Supabase というものを知り、この機会にさわってみました。また、並行して Zenn への投稿も初めてやってみました。よろしくお願いします。...","link":"https://zenn.dev/taka_shino/articles/bengo4-advent-calendar-18","isoDate":"2021-12-17T21:53:53.000Z","dateMiliSeconds":1639778033000},{"title":"Youtube Data API を使って動画を取得する","contentSnippet":"作ったものAPIキーの取得APIキーを登録フォーム作成動画取得動画を表示するおわりに作ったものフォームに入力したキーワードに一致するYoutube動画を表示します。APIキーの取得Google Cloud PlatformからYoutube Data API v3 のキーを取得します。参考記事YouTube APIキーの取得 (2020/03/25時点) - QiitaAPIキーを登録.envファイルに取得したAPIキーを記述します。今回はNext.jsを使っています。# youtube api keyNEXT_PUBLIC_YOUTUBE_API_KEY=○○○○○○○○○○○フォーム作成検索キーワードを入力するフォームを作成します<form onSubmit={handleSubmit}>    <input        type=\"text\"        name=\"keyword\"        value={keyword}        onChange={handleInputKeyword}    /></form>動画取得APIを実行して動画のデータを取得します。今回は再生回数が多い順に30件取得しています。その他のプロパティは下記ドキュメントを参考にしてください。developers.google.comconst handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {  e.preventDefault()  await axios    .get(      `https://www.googleapis.com/youtube/v3/search?type=video&part=snippet&q=${keyword}&maxResults=30&order=viewCount&key=${process.env.NEXT_PUBLIC_YOUTUBE_API_KEY}`    )    .then((res) => {      setVideoItems(res.data.items)    })    .catch((err) => {      console.log(err)    })}レスポンス内容は下記のようになります。{    \"kind\": \"youtube#searchResult\",    \"etag\": \"kDTRucohFNe7n0uBO5psgi89I0U\",    \"id\": {        \"kind\": \"youtube#video\",        \"videoId\": \"YZia5Z-oycQ\"    },    \"snippet\": {        \"publishedAt\": \"2014-04-16T00:43:46Z\",        \"channelId\": \"UCS_dOTlDQhzGR2VLASzVo4g\",        \"title\": \"お腹が空いたと鳴くマンチカン子猫！　 The Munchkin cat meowing.So cute kitten!\",        \"description\": \"baby #猫 #meow 食事の支度を始めると、キッチンを金網越しに覗いて、ニャーニャーとご飯の要求をし続けている白い子猫と、一緒に鳴いてる他のねこたち。5匹とも ...\",        \"thumbnails\": {            \"default\": {                \"url\": \"https://i.ytimg.com/vi/YZia5Z-oycQ/default.jpg\",                \"width\": 120,                \"height\": 90            },            \"medium\": {                \"url\": \"https://i.ytimg.com/vi/YZia5Z-oycQ/mqdefault.jpg\",                \"width\": 320,                \"height\": 180            },            \"high\": {                \"url\": \"https://i.ytimg.com/vi/YZia5Z-oycQ/hqdefault.jpg\",                \"width\": 480,                \"height\": 360            }        },        \"channelTitle\": \"Cynthia Moon短足だってイイじゃん\",        \"liveBroadcastContent\": \"none\",        \"publishTime\": \"2014-04-16T00:43:46Z\"    }}動画を表示する取得した動画データを元にUIを構築します。<table>  <tbody>    {videoItems.map((video, i) => (      <tr key={i}>        <td>          <Image            src={video.snippet.thumbnails.medium.url}            alt=\"thumbnailsUrl\"            height={video.snippet.thumbnails.medium.height}            width={video.snippet.thumbnails.medium.width}          />        </td>        <td>          <strong>            <a              href={`https://www.youtube.com/watch?v=${video.id.videoId}`}              target=\"_blank\"              rel=\"noopener noreferrer\"            >              {video.snippet.title}            </a>          </strong>          {video.snippet.channelTitle}          <br />          <span>            {video.snippet.description}          </span>        </td>      </tr>    ))}  </tbody></table>おわりにYoutube Data API を使って動画のデータを取得しました。検索プロパティがまだたくさんあるので他にも色々できそうです。","link":"https://takashinoda.hatenablog.com/entry/2021/07/11/212301","isoDate":"2021-07-11T12:23:01.000Z","dateMiliSeconds":1626006181000},{"title":" Vercel にホスティングしているサイトに Basic 認証をつける","contentSnippet":"はじめに実装static-auth と safe-compare をインストールするserver.js を作成vercel.json を作成デプロイエラーはじめにVercelにホスティングしているサイト(create-react-app)にBasic認証をつける時に、調べた事をメモしていきます。下記サイトを参考にさせていただきました。Vercel で Basic 認証付きのプレビュー環境を作る - WebdelogNext.js + Vercel で Basic 認証をかけるmanifest.jsonはBasic認証がかかっていると通らない | 怪しい物を開発するブログ実装static-auth と safe-compare をインストールするnpm i static-authnpm i safe-comparewww.npmjs.comwww.npmjs.comserver.js を作成こちらは参考にさせていただいたサイトのコードを使用させていただきました。const protect = require('static-auth')const safeCompare = require('safe-compare')const USER_NAME = process.env.USER_NAME || 'admin'const PASSWORD = process.env.PASSWORD || 'admin'const server = protect(  '/',  (username, password) => safeCompare(username, USER_NAME) && safeCompare(password, PASSWORD),  {    directory: `${__dirname}/build`,    onAuthFailed: (res) => {      res.end('Authentication failed')    },  })module.exports = serververcel.json を作成{    \"builds\": [      {        \"src\": \"server.js\",        \"use\": \"@vercel/node\"      }    ],    \"routes\": [      {         \"src\": \"/.*\",         \"dest\": \"server.js\"       }    ]  }デプロイ下記実行してサイトを確認するvercel --prodエラーBasic 認証をつけるとmanifest.json でエラーで出ていたので、public / html のmanifest 部分に crossorigin=\"use-credentials\" を追加する<link rel=\"manifest\" href=\"%PUBLIC_URL%/manifest.json\" crossorigin=\"use-credentials\"/>","link":"https://takashinoda.hatenablog.com/entry/2021/05/29/164241","isoDate":"2021-05-29T07:42:41.000Z","dateMiliSeconds":1622274161000},{"title":"位置情報からテイクアウトやってるお店を教えてくれるLINEbot","contentSnippet":"作ったもの主に使用した技術やったことオウム返しbotを作成yelpに登録テイクアウトbot作成axiosをインストール「位置情報を送信してね！」と返す緯度・経度を取得店舗情報を取得店舗情報をカルーセル表示するデプロイまとめ作ったもの位置情報を送るとそこから半径500m以内のテイクアウトやっているお店を最大10件、近い順にカルーセル表示するLINEのbotです。ソースコードは下記リポジトリにあります。github.com主に使用した技術node.js (v12.14.0で動作確認済み)yelp APILINE Messaging APIvercelいらすとややったことオウム返しbotを作成LINEbotは初めてだったので、ますは下記を参考にしてオウム返しをするbotを作成しました。1時間でLINE BOTを作るハンズオン (資料+レポート) in Node学園祭2017 #nodefest - Qiitayelpに登録yelpに登録してAPI Keyを取得します。.envファイルにyelpのAPI Keyを追加します。.envファイルをまだ作ってない場合は下記コマンドで作成npm install dotenvtouch .env# LINEのチャネルシークレットとチャネルアクセストークンCHANNEL_SECRET = \"XXXXXXXXXXXX\"CHANNEL_ACCESS_TOKEN = \"XXXXXXXXXXXX\"# 今回取得したyelpのAPI Keyを追記YELP_API_KEY = \"XXXXXXXXXXXX\"テイクアウトbot作成.envから値を読み込むためオウム返しbotのserver.jsに下記を追加require('dotenv').config();axiosをインストールyelp APIを用いて通信を行うためaxiosをインストールします。npm install axios「位置情報を送信してね！」と返す今回はユーザから位置情報が欲しいので、位置情報以外が送られた場合は「位置情報を送信してね！」と返します。if (event.type !== 'message' || event.message.type !== 'location') {      return client.replyMessage(event.replyToken, {          type: 'text',          text: '位置情報を送信してね！'      }) }緯度・経度を取得送られたきた位置情報から緯度・経度を取得します。// 緯度const lat = event.message.latitude// 経度const lng = event.message.longitude店舗情報を取得axiosを使って通信を行い店舗情報を取得します。let yelpREST = axios.create({    baseURL: \"https://api.yelp.com/v3/\",    headers: {      Authorization: `Bearer ${process.env.YELP_API_KEY}`,      \"Content-type\": \"application/json\",    },  })  await yelpREST.get(\"/businesses/search\", {    params: {      latitude: lat, // 取得した緯度      longitude: lng, // 取得した経度      radius: 500, // 今回は半径500m      term: \"takeout\", // テイクアウト      sort_by: \"distance\", // 距離でソート      limit: 10, // 最大10件    },  })(略)その他パラメータはyelpのサイトを参照してください。Business Search Endpoint - Yelp Fusionレスポンスは下記のようになりました。(例){  businesses: [    {      id: '12-34xx56xx78xx90xxxxxx',      alias: 'XXXXXX-渋谷区',      name: 'Shibuya XXXXXX',      image_url: 'https://sample.jpg',      is_closed: false,      url: 'https://www.yelp.com/biz/xxxxxxxxxxxxxx',      review_count: 5,      categories: [Array],      rating: 4.5,      coordinates: [Object],      transactions: [],      price: '￥￥￥',      location: [Object],      phone: '+0123456789',      display_phone: '+81 0-1234-5678',      distance: 30.987654321    },(略)}店舗情報をカルーセル表示する上記通信成功後レスポンスから欲しいものを選択して、カルーセル表示します。詳しくは公式ドキュメントを参照ください。Messaging APIリファレンス | LINE Developers(略).then(function (response) {        // handle success        // データがない場合は「近くにお店はありません！」と表示する        if(response.data.total === 0) {            return client.replyMessage(event.replyToken, {                type: 'text',                text: '近くにお店はありません！'            })        }          // carouselは最大10          // colums配列にデータを入れていく          let columns = [];          for (let item of response.data.businesses) {            columns.push({              \"thumbnailImageUrl\": item.image_url,              \"title\": item.alias,              \"text\": '⭐️' + item.rating,              \"actions\": [{                \"type\": \"uri\",                \"label\": \"yelpでみる\",                \"uri\": item.url              }]            });          }          // replyMessageの第二引数を配列にすることで複数メッセージを送信できる        return client.replyMessage(event.replyToken, [          {            type: 'text',            text: 'おいしそうだね！'          },          {            type: 'template',            altText: '店舗情報を送信しました！',            template: {                type: 'carousel',                columns: columns            }        }]);    })デプロイ下記記事を参考にさせていただき、vercelでデプロイを行いました。VercelでLINE BOTを動かす 2020年5月版 - Qiitavercel.json \"version\": 2 は現在はなくても大丈夫そうでした。{    \"routes\": [        { \"src\": \"/\", \"dest\": \"api/server.js\" },        { \"src\": \"/webhook\", \"dest\": \"api/server.js\" }    ]}まとめyelpのAPIを使ってテイクアウトできるお店を教えてくれるLINEbotを作成しました。今回作成したLINEbotは下記を読み込む事でお友達に追加できますのでよかったら追加してみてください。","link":"https://takashinoda.hatenablog.com/entry/2021/01/31/183328","isoDate":"2021-01-31T09:33:28.000Z","dateMiliSeconds":1612085608000},{"title":"Next.js + TypeScript + Tailwind CSS でブログサイトを作成","contentSnippet":"はじめにNext.jsでブログサイトを作成TypeScript化Tailwind CSSに置き換えるつまづいた点編集・追加おわりにはじめにタイトルにもある通り、Next.js + TypeScript + Tailwind CSS を用いてブログサイトを作成した時のメモ的な感じでここに記させていただきます。下記のバージョンで操作確認しております。  \"dependencies\": {    \"next\": \"^10.0.0\",    \"react\": \"16.13.1\",    \"react-dom\": \"16.13.1\",    \"tailwindcss\": \"npm:@tailwindcss/postcss7-compat@^2.0.1\"  },github.comNext.jsでブログサイトを作成ブログのベースはNext.jsの公式ドキュメントにあるチュートリアル通りに作成しました。Create a Next.js App | Learn Next.jsQiitaに日本語訳の記事もあり参考になりました。大幅にリニューアルされた Next.js のチュートリアルをどこよりも早く全編和訳しました - QiitaTypeScript化TS化を行いました。tsconfig.jsonを作成touch tsconfig.jsontypescriptをインストールnpm install --save-dev typescript @types/react @types/node.jsファイルを.tsxに変更して、型をつけていきました。GetStaticProps、GetStaticPaths、GetServerSidePropsといったNext.js固有の型もあります。各API (getStaticProps、getStaticPaths、getServerSideProps) については下記記事を参考にさせていただきました。Next.js 9.3新API getStaticProps と getStaticPaths と getServerSideProps の概要解説 - QiitaTailwind CSSに置き換えるTailwind CSSの導入の方法は下記の記事を参考にさせていただきました。Next.jsにTailwind CSSを導入する - パンダのプログラミングブログまた、tailwind.config.js をカスタマイズしてクラス名を追加しました。module.exports = {  purge: ['./pages/**/*.{js,jsx,ts,tsx}', './components/**/*.{js,jsx,ts,tsx}'],  darkMode: false, // or 'media' or 'class'  theme: {    extend: {      margin: {        auto: 'auto'      },      maxWidth: {        180: '180px'      },    },  },  variants: {    extend: {},  },  plugins: [],}つまづいた点Tailwind CSSを導入した際に下記エラーが出ました。Error: PostCSS plugin tailwindcss requires PostCSS 8.こちらはTailwind CSSのサイトにて下記のように記載がありました。Installation - Tailwind CSSIf you run into the error mentioned above, uninstall Tailwind and re-install using the compatibility build instead:上記のエラーが発生した場合は、Tailwindをアンインストールし、互換性のあるビルドを使用して再インストールしてください。npm uninstall tailwindcss postcss autoprefixernpm install tailwindcss@npm:@tailwindcss/postcss7-compat @tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9Tailwind CSS v2.0以降PostCSS8に依存しており、PostCSS8はまだ数か月しか経っていないため、エコシステム内の他の多くのツールはまだ更新されていません。よって、Tailwind CSSのインストール後にターミナルでこのようなエラーが表示される場合があるそうです。編集・追加ブログ記事をカードのように表示できるようにコンポーネントを追加しました。また、カードに表示する画像をmarkdownファイル(/posts)に設定している場合はその画像を表示し、それ以外はデフォルトの画像を表示します。import React from 'react'import Image from 'next/image'import Link from 'next/link'import { FaRegCalendarAlt } from 'react-icons/fa'import { Date } from '../components/date'export const CardList = ({ allPostsData }) => {  return (    <>      <ul className=\"list-none\">        {allPostsData.map(({ id, date, title, image }) => (          <div className=\"inline-flex mr-5 max-w-180\" key={id}>            <li className=\"mb-5 rounded-lg overflow-hidden shadow-xl p-3 w-44 bg-white\">              {image ? (                <Image                  src={image}                  width=\"200\"                  height=\"200\"                  className=\"w-24 h-24\"                  alt=\"thumbnail\"                />              ) : (                <Image                  src=\"/images/no_image.png\"                  width=\"200\"                  height=\"200\"                  className=\"w-24 h-24\"                  alt=\"no-image\"                />              )}              <br />              <Link href={`/posts/${id}`}>                <a>{title}</a>              </Link>              <br />              <small className=\"text-gray-400\">                <span className=\"mr-1\">                  <FaRegCalendarAlt />                </span>                <Date dateString={date} />              </small>            </li>          </div>        ))}      </ul>    </>  )}参考:Tailwind CSS入門 - フロントエンドで素晴らしい開発体験を得るために - パンダのプログラミングブログおわりに今回は、Next.jsのチュートリアルで作成したブログサイトに、TypeScriptとTailWind CSSを導入しました。今後はogpを設定したり、記事を投稿してさらに改善していきたいです。","link":"https://takashinoda.hatenablog.com/entry/2021/01/11/151626","isoDate":"2021-01-11T06:16:26.000Z","dateMiliSeconds":1610345786000},{"title":"react-axeでアクセシビリティの向上を目指す","contentSnippet":"はじめに前回の記事で紹介させていただいたサイトのアクセシビリティをチェックしたら71点でした。本記事では、下記の記事を参考にさせていただき、react-axeを用いてアクセシビリティの向上を目指します。tech.mercari.com本記事で記述しているのはこのWebサイトのトップページのみの修正箇所です。はじめにやったことreact-axeを導入New aXe issuescritical: Buttons must have discernible textserious: Elements must have sufficient color contrastmoderate: Document must have one main landmarkserious: Links must have discernible textmoderate: Page must contain a level-one headingmoderate: All page content must be contained by landmarksおわりに参考サイトやったことreact-axeを導入react-axeを参考記事と同様に導入しますreact-axeと@types/react-axeをインストールnpm i react-axenpm i @types/react-axe開発環境で結果を確認したいので dynamic import でライブラリをインポートif (process.env.NODE_ENV !== 'production') {  import('react-axe').then((axe) => {    axe.default(React, ReactDOM, 1000)    ReactDOM.render(<App />, document.getElementById('root'))  })} else {  ReactDOM.render(    <React.StrictMode>      <App />    </React.StrictMode>,    document.getElementById('root')  )}こうする事でコンソールに New aXe issuesというのが出力されています。さらにリンクをクリックすると詳しい詳細を確認する事ができました。(日本語に対応していました)あとは New aXe issuesの通りに修正していきます。New aXe issues以下に実際に出力されたものを記します。critical: Buttons must have discernible textボタンには認識可能なテキストが存在しなければなりません詳細はこちらから確認できますボタン要素にaria-label属性を追加しました。<Button    aria-label=\"キーワードで検索\"    size=\"large\"    variant=\"contained\"    color=\"default\"    className={classes.button}    onClick={() => history.push('/search')}>    キーワードで探す</Button>serious: Elements must have sufficient color contrastテキスト要素は背景に対して十分な色のコントラストがなければなりません詳細はこちらから確認できますヘッダーの背景色と文字の色のコントラストをつけました。moderate: Document must have one main landmarkドキュメントにはmainランドマークが1つ含まれていなければなりません詳細はこちらから確認できますmainタグを記述していなかったのでmainタグを記述しました。serious: Links must have discernible textリンクには認識可能なテキストが存在しなければなりません詳細はこちらから確認できますリンク要素にaria-label属性を追加しました。moderate: Page must contain a level-one headingページにはレベル1の見出しが含まれていなければなりません詳細はこちらから確認できますh2タグで記述していた部分をh1タグに修正しました。moderate: All page content must be contained by landmarksページのすべてのコンテンツはlandmarkに含まれていなければなりません詳細はこちらから確認できますメインとなる部分のコンテンツをmainタグで囲んでいなかったので、mainタグの中に記述しました。おわりにトップページ以外も全て同じようにreact-axeの New aXe issuesに従い修正を行いました。その結果アクセシビリティのスコアも100点にする事ができました。修正後のソースコードはこちらにあります。github.com参考サイトtech.mercari.comgithub.com","link":"https://takashinoda.hatenablog.com/entry/2020/05/31/123127","isoDate":"2020-05-31T03:31:27.000Z","dateMiliSeconds":1590895887000},{"title":"最近作ったレシピ投稿サイトとそれに用いた技術","contentSnippet":"はじめにSTAY HOME週間で家にいる事が多くなり、初めてまともな自炊を始めました。そこで、自分が作った料理のレシピを投稿するサイトを作りました。はじめに作った物環境ReactFirebaseCloud StorageCloud FirestoreFirebase HostingMaterial-UIReact Hook FormuseFormregisterhandleSubmitReact RouteruseHistoryuseParamsおわりに作った物レシピ投稿サイトです。キーワードで検索、レシピを全て一覧表示、レシピ投稿の3つの機能があります。sketchy-kitchen.comキーワード検索レシピをCloud Firestoreに保存する時にタグを1つ以上登録してもらって、それをもとに検索します。検索結果ページより画像をクリックする事でレシピの詳細ページに遷移します。一覧表示Cloud Firestoreから全て表示します。画像をクリックする事でレシピの詳細ページに遷移します。投稿画像をCloud Storageに保存して、ダウンロードURLを取得し、それと共に、料理名、材料などの情報をCloud Firestoreに保存します。ソースコードは以下のリポジトリにあります。github.com環境nodev12.11.1create-react-appをインストールしてあるnpm install -g create-react-appReactReactは公式サイトでは以下のように言われています。チュートリアルもあるので詳しくは公式サイトを見てみてください。ユーザインターフェース構築のためのJavaScriptライブラリ(公式サイトより)Reactはcreate-react-appというReactアプリの雛形を簡単に作成できる便利な物があります。以下のコマンドを実行します。npx create-react-app プロジェクト名 --typescript--typescriptはオプションでこれをつけるとReact + TypeScriptの環境を構築できます。(つけなくてもReactの環境は構築できます)作成されたフォルダに移動cd フォルダ名実行して動作を確認npm startja.reactjs.orgFirebaseFirebaseはmBaasと言われいます。Googleが提供している包括的なアプリ開発プラットフォームで様々な機能がありますが、以下の3つを利用しました。firebase.google.comCloud StorageCloud Storageはファイルを保存・配信する事ができます。今回は、ユーザからアップロードされた画像を保存するために用いました。const storageRef = firebase.storage().ref('images').child(`${postIndex}.jpg`)const snapshot = storageRef.put(image)以下略Cloud FirestoreCloud FirestoreはNoSQLデータベースです。Cloud Storageにアップロードされた画像のダウンロードURL、ユーザが入力した材料などの情報を保存するために使用しました。const downloadURL = await storageRef.getDownloadURL()const db = firebase.firestore()     db.collection('tileData').add({       image: downloadURL,       title: data.title,以下略     })Firebase HostingFirebase Hostingはホスティングに用いました。Material-UIMaterial-UIはマテリアルデザインをReactに導入する事ができるUIコンポーネントです。アプリのデザインを手軽にいい感じにする事ができます。material-ui.comReact Hook Formフォームバリデーションライブラリです。ユーザがレシピを入力するフォームにバリデーションをかけました。公式サイトでは、他のバリデーションライブラリとコードの記述量やレンダリング数を比較してありました。react-hook-form.com余談ですが、React Hook FormさんはTwitterでお話しやいいねをしてくれます😄聞いてすごい!— 📋 React Hook Form (@HookForm) May 12, 2020 useFormReact Hook FormのAPIです。useFormを呼び出す事で様々なメソッドを受け取る事ができます。詳しくは公式サイトをご覧ください。今回は、registerとhandleSubmitを使いました。const { register, handleSubmit } = useForm()registerこのメソッドを使用して、フォームにバリデーションルールを登録することができます。※ Material-UIと併用<TextField inputRef={register({ required: true })} />handleSubmithandleSubmitは、フォームバリデーションに成功するとフォームデータを渡し事ができます。const onSubmit = (data) => {   ....略....}<form onSubmit={handleSubmit(onSubmit)}>     <TextField inputRef={register({ required: true })} />     <button type=\"submit\">Submit</button></form>React Routerルーティングするために用いました。reacttraining.comuseHistoryReact RouterのHooks APIです。ページ遷移を行う時にhistoryを取得します。※ Material-UIと併用const history = useHistory()<Button onClick={() => history.push('/home'}>useParamsURLのパスの中で動的に変化する部分の値を取得します。レシピの詳細ページを1つ用意して、URLに応じて中身を変えています。おわりにまだ完全にできた訳ではないので、これからも改良していきたいと思います。あと、まともに自炊する時間も無くなってきました😅","link":"https://takashinoda.hatenablog.com/entry/2020/05/17/154058","isoDate":"2020-05-17T06:40:58.000Z","dateMiliSeconds":1589697658000},{"title":"react-testing-libraryでテストをやってみて","contentSnippet":"はじめに以前にcreate-react-appで作成したReactアプリをテストしてみるというJestとEnzymeを使ってテストを行う記事を書きましたが、今回は、以下の記事を参考にしてReact Testing Libraryを使ってみました。本記事は実際に手を動かしてみた感想ですので、詳しくは参考記事をご覧ください。www.freecodecamp.orgでは手を動かしていきます。テスト実行時のエラー記事通りに手を動かしていくと、2. Testing DOM elements (DOM要素のテスト)の所で以下のようなエラーが出ましたTestElements.test.jsimport React from 'react'import { render, cleanup } from '@testing-library/react'import { TestElements } from './TestElements'afterEach(cleanup)// カウンターが0に等しいかit('should equal to 0', () => {    const { getByTestId } = render(<TestElements />)    expect(getByTestId('counter')).toHaveTextContent(0)})// ボタンが有効か無効かit('should be disabled', () => {    const { getByTestId } = render(<TestElements />)    expect(getByTestId('button-down')).toBeDisabled()})TypeError: expect(...).toHaveTextContent is not a functionTypeError: expect(...).toBeDisabled is not a functiongithub.com上記のissuesにある通りにimport \"@testing-library/jest-dom/extend-expect\";を追加する事で解決しました。以降同じようにやっていきます。TestElements.test.js (修正後)import React from 'react'import { render, cleanup } from '@testing-library/react'import { TestElements } from './TestElements'import '@testing-library/jest-dom/extend-expect'afterEach(cleanup)// カウンターが0に等しいかit('should equal to 0', () => {    const { getByTestId } = render(<TestElements />)    expect(getByTestId('counter')).toHaveTextContent(0)})// ボタンが有効か無効かit('should be disabled', () => {    const { getByTestId } = render(<TestElements />)    expect(getByTestId('button-down')).toBeDisabled()})yarn testを実行してテストが通りました🎉これまで、getByTestIdをなんとなく使ってきましたが以下の記事にTipsとしてgetByTestIdはなるべく避けるという知見を得る事ができました。qiita.comこれは、クエリというもので公式ドキュメントのガイドにも優先順位が書いてありました。testing-library.comtesting-library.comおわりにreact-testing-libraryはcreate-react-appの場合最初から導入されているので、すぐに始める事ができます。テストを書いてみるのは2回目でしたが、独自のヘルパー関数を作る部分の理解が足りずもう少し勉強が必要だと感じました。自分が実際にやった物はこちらのリポジトリにあげていこうと思います。その他の参考文献kentcdodds.com","link":"https://takashinoda.hatenablog.com/entry/2020/04/23/165112","isoDate":"2020-04-23T07:51:12.000Z","dateMiliSeconds":1587628272000},{"title":"イテレータとジェネレータ","contentSnippet":"イテレータ反復可能なオブジェクト (iterable object)反復子オブジェクト(iterator object)配列についてみていくイテレータのプロトコルジェネレータreturnyield式と双方向コミュニケーション参考資料ES2015から新たに導入された、イテレータ(iterator)とジェネレータ(generator)という概念についてまとめました。イテレータイテレータ(反復子)は繰り返しのための機構で、以下の2つの種類のオブジェクトがあります。この2つは相反するものでは無く、反復可能かつ反復子でもあるオブジェクトもあります。反復可能なオブジェクト (iterable object)Symbol.iteratorと呼ばれるプロパティを含んでいるオブジェクト、このプロパティの値はイテレータを返す関数for...ofを使って各要素について処理できる (配列、文字列、Map、Set)反復子オブジェクト(iterator object)nextと呼ばれるメソッドを実装しているオブジェクト。nextメソッドはvalueとdoneというプロパティをもつオブジェクトを返す通常はイテレータオブジェクトの意味でイテレータという配列についてみていく配列は反復可能なオブジェクト (iterable object)です。配列が反復可能なオブジェクトの例const foodstuffs = [    'egg',    'milk',    'sugar']for (let afood of foodstuffs) {    console.log(afood)}/*  実行結果を表示eggmilksugar*/しかし、配列はイテレータ(反復子オブジェクト)ではありません。イテレータは上記の通りnextというメソッドを呼び出す事で要素を取り出せるオブジェクトです。先ほどの配列にnextを使うと配列はイテレータ(反復子オブジェクト)では無いのでエラーになるfoodstuffs.next()/* 実行結果を表示TypeError: foodstuffs.next is not a function*/しかし、valuesというメソッドを使う事で配列をイテレータ(反復子オブジェクト)に変換する事ができる// itという変数にイテレータを代入しているconst it = foodstuffs.values()これによってイテレータを作成することができたのでnextメソッドを使って要素を取り出すことができるnextを呼び出すとvalueとdoneの2つのプロパティをもつオブジェクトが返されるvalue: 処理を行うために使う値done: 全ての要素を返したかどうかを示す真偽値作成したitにnextを使ってみるconst foodstuffs = [    'egg',    'milk',    'sugar']const it = foodstuffs.values()console.log(it.next())console.log(it.next())console.log(it.next())console.log(it.next())/* 実行結果を表示{ value: 'egg', done: false }{ value: 'milk', done: false }{ value: 'sugar', done: false }// 供給するデータがなくなるとvalueはundefinedに、doneはtrueになる { value: undefined, done: true }*/イテレータは前の状態を記憶して、nextメソッドが呼ばれるたびに次のデータを供給しているイテレータのプロトコルイテレータ(反復子オブジェクト)であるためには、イテレータプロトコルを実装する必要があり、そのために、Symbol.iteratorを実装します。これは、イテレータの振る舞いをするオブジェクトを戻すものです。つまり、nextメソッドを呼ぶとvalueとdoneをもつオブジェクトを返すようなメソッドを実装するということです。詳しくはこちらを参考にしてください配列にvaluesを使ってイテレータを得ることでイテレータプロトコルを実装する方法class Food {    constructor() {        this.foodstuffs = []    }    add(foodstuffs) {        const now = Date.new()        console.log(`食材追加: ${foodstuffs}(${now})`)        this.foodstuffs.push({ foodstuffs, timestamp: now})    }    [Symbol.iterator]() {        return this.foodstuffs.values()    }}nextが呼ばれた時にvalueとdoneをプロパティにもつオブジェクトを返すオブジェクト実装する方法[Symbol.iterator]() {    let i = 0;    const foodstuffs = this.foodstuffs    return (        next: () => i => foodstuffs.length ? {value: undefined, done: true} : {value: foodstuffs[i++], done: false}    )}つまり、最初の例のfoodstuffsは配列で、配列は反復可能なオブジェクト (iterable object)なので、[Symbol.iterator]と持っています。メソッド[Symbol.iterator]は実行するとイテレータを返すので、配列は反復可能なオブジェクトをもとにイテレータを作成するのは簡単です。配列のメソッド[Symbol.iterator]を実行して返ってくる値を使えば良いです。上の例をこのように書くこともできる[Symbol.iterator]() {    return this.foodstuffs[Symbol.iterator]()}ジェネレータジェネレータは関数の一種と考えることができますが、ジェネレータを呼び出しても関数のようにすぐには実行されず、まずはイテレータが返されます。その後、イテレータのメソッドnextを呼び出すたびに実行が進んでいきます。ジェネレータを定義する場合functionの後に*をつけます。また、呼び出し元に値を提供するためにはyieldを使います(returnも使われますが通常は値を返すためには使われません)。それ以外は普通の関数と同じ構文です。ちなみにジェネレータはアロー関数のように記述はできないそうです。ジェネレータの例function* weeks() {    yield '日'    yield '月'    yield '火'    yield '水'    yield '木'    yield '金'    yield '土'}上で作成したジェネレータは以下のように呼び出すことができます。ジェネレータを呼び出すとイテレータが返ってくるので、そのイテレータをnextメソッドを使って順に処理していきます。const it = weeks()console.log(it.next())console.log(it.next())console.log(it.next())console.log(it.next())console.log(it.next())console.log(it.next())console.log(it.next())console.log(it.next())/* 実行結果の表示{ value: '日', done: false }{ value: '月', done: false }{ value: '火', done: false }{ value: '水', done: false }{ value: '木', done: false }{ value: '金', done: false }{ value: '土', done: false }{ value: undefined, done: true }*/returnジェネレータのどこかでreturnを呼び出すとdoneがtrueになり、valueプロパティはreturnで指定した値になります。ジェネレータから有用な値を提供する場合yieldを使うべきです。yield式と双方向コミュニケーションジェネレータを使うと呼び出し側との間で双方向の会話が可能になります。そのためにyieldを使います。yieldは式なので、評価の結果何かしらの値を持ちます。どんな値かというとnext呼び出し時の引数の値です。ジェネレータは遅延評価を可能にしています。双方向の会話ができるジェネレータの例function* conversation() {    const name = yield '名前は？'    const food = yield '好きな食べ物は？'    return `${name}さんの好きな食べ物は${food}だそうです！`}const it = conversation()console.log(it.next())console.log(it.next('たろう'))console.log(it.next('オムライス'))console.log(it.next())/* 実行結果の表示{ value: '名前は？', done: false }{ value: '好きな食べ物は？', done: false }{ value: 'たろうさんの好きな食べ物はオムライスだそうです！', done: true }{ value: undefined, done: true }*/参考資料O'Reilly Japan - 初めてのJavaScript 第3版Symbol.iterator - JavaScript | MDNES2015のIteratorとGeneratorについて - mikami's blog","link":"https://takashinoda.hatenablog.com/entry/2020/04/12/175925","isoDate":"2020-04-12T08:59:25.000Z","dateMiliSeconds":1586681965000},{"title":"正規表現確認ノート (JavaScript)","contentSnippet":"正規表現は下記のようにスラッシュで囲まれたパターンからなるlet pattern = /正規表現/;    match()search()正規表現パターン単純な文字列にマッチするか/ABC/どれか1文字マッチするか[ABC]指定文字以外のどれか1文字にマッチするか[^ABC]選択範囲のどれか1文字にマッチするか[A-C]エスケープ\\文字列の先頭にマッチするか^A文字列の末尾にマッチするかA$直前文字列の0回以上の繰り返しにマッチするかhu*直前の文字列の1回以上の繰り返しにマッチするかa+直前の文字列の0回か1回の出現にマッチするかa?任意の一文字にマッチするかh.t直前の文字をn回表示とマッチするか{n}直前の文字をn回以上表示とマッチするか{n,}直前の文字をm~n回表示とマッチするか{m,n}アンダースコアと英数字にマッチするか\\w文字以外にマッチするか\\W数字にマッチするか\\d数字以外にマッチするか\\D主なオプションフラググローバルリサーチg大文字と小文字を区別しないiUnicode対応u参考資料match()文字列中で一致するものを検索．検索結果の配列を返す．match()を使った正規表現パターンの記述let result = 文字列.match(正規表現)let pattern = /ABC/;let string = 'abcABC';let result = string.match(pattern);console.log(result);// [ 'ABC', index: 3, input: 'abcABC', groups: undefined ]search()文字列中で一致するものがあるか確認．マッチした場所の文字位置（インデックス）を返す．マッチしない場合は-1を返すsearch()を使った正規表現パターンの記述let result = 文字列.search(正規表現)let pattern = /ABC/;let string = 'abcABC';let result = string.search(pattern);console.log(result);// 3正規表現パターン単純な文字列にマッチするか/ABC/単純にABCという文字列にマッチするかマッチするlet pattern = /ABC/;let string = 'abcABC';マッチしないlet pattern = /ABC/;let string = 'abc';どれか1文字マッチするか[ABC]ABCのどれか1文字にマッチするか- マッチするlet pattern = /[ABC]/;let string = 'aAbBcCdD';マッチしないlet pattern = /[ABC]/;let string = 'abcd';指定文字以外のどれか1文字にマッチするか[^ABC]ABC以外のどれか1文字にマッチするかマッチするlet pattern = /[^ABC]/;let string = 'AaBbCc';マッチしないlet pattern = /[^ABC]/;let string = 'DdEeFf';選択範囲のどれか1文字にマッチするか[A-C]AからCまでのどれか1文字にマッチするかマッチするlet pattern = /[A-C]/;let string = 'abcABC';マッチしないlet pattern = /[A-C]/;let string = 'abcefg';エスケープ\\\\の次に書く文字列をエスケープする例えば，下記のように/(スラッシュ)を見つけたい時などにエスケープする//エスケープしないとこうなるlet pattern = ///;//エスケープありlet pattern = /\\//;let string = 'ABC/abc';let result = string.search(pattern);console.log(result);// 3文字列の先頭にマッチするか^A文字列(行)の先頭にマッチするかマッチする// Aが先頭にあるかどうかlet pattern = /^A/;let string = 'ABB';let result = string.search(pattern);console.log(result);// 0マッチしない// Aが先頭にあるかどうかlet pattern = /^A/;let string = 'BAB';let result = string.search(pattern);console.log(result);// -1文字列の末尾にマッチするかA$文字列(行)の末尾にマッチするか下記にマッチする時と，しない時の例を示すマッチする// Aが末尾にあるかどうかlet pattern = /A$/;let string = 'BABA';let result = string.search(pattern);console.log(result);// 3マッチしない// Aが末尾にあるかどうかlet pattern = /A$/;let string = 'BAB';let result = string.search(pattern);console.log(result);// -1直前文字列の0回以上の繰り返しにマッチするかhu*直前の文字列huの0回以上の繰り返しにマッチするかマッチする// huが0回以上繰り返されているかどうかlet pattern = /hu*/;let string = 'hhhhhuuu';let result = string.search(pattern);console.log(result);// 0// huが0回以上繰り返されているかどうかlet pattern = /hu*/;let string = 'uuuh';let result = string.search(pattern);console.log(result);// 3マッチしない// huが0回以上繰り返されているかどうかlet pattern = /hu*/;let string = 'uuuu';let result = string.search(pattern);console.log(result);// -1直前の文字列の1回以上の繰り返しにマッチするかa+直前の文字列aの1回以上の繰り返しにマッチするかマッチする// aが1回以上繰り返されているかどうかlet pattern = /a+/;let string = 'banana';let result = string.search(pattern);console.log(result);// 1マッチしない// aが1回以上繰り返されているかどうかlet pattern = /a+/;let string = 'lemon';let result = string.search(pattern);console.log(result);// -1直前の文字列の0回か1回の出現にマッチするかa?直前の文字列aの0回か1回の出現にマッチするかマッチする// huが0回か1回の出現しているかどうかlet pattern = /hu?/;let string = 'huuuuu';let result = string.search(pattern);console.log(result);// 0マッチしない// huが0回か1回の出現しているかどうかlet pattern = /hu?/;let string = 'nnnnnn';let result = string.search(pattern);console.log(result);// -1任意の一文字にマッチするかh.th.tの.は任意の一文字にマッチするかマッチする// h◯tに一致するかどうかlet pattern = /h.t/;let string = 'hat';let result = string.search(pattern);console.log(result);// 0マッチしない// h◯tに一致するかどうかlet pattern = /h.t/;let string = 'heat';let result = string.search(pattern);console.log(result);// -1直前の文字をn回表示とマッチするか{n}直前の文字をn回表示とマッチするかマッチする// [0-9]{3}は3桁の数字let pattern = /[0-9]{3}/;let string = '123';マッチしない// [0-9]{3}は3桁の数字let pattern = /[0-9]{3}/;let string = 'abc';直前の文字をn回以上表示とマッチするか{n,}直前の文字をn回以上表示とマッチするかマッチする// [0-9]{3,}は3桁以上の数字let pattern = /[0-9]{3,}/;let string = '1234';マッチしない// [0-9]{3,}は3桁以上の数字let pattern = /[0-9]{3,}/;let string = '12';直前の文字をm~n回表示とマッチするか{m,n}直前の文字をm~n回表示とマッチするかマッチする// [0-9]{3~5}は3~5桁の数字let pattern = /[0-9]{3,5}/;let string = '1234';マッチしない// [0-9]{3~5}は3~5桁の数字let pattern = /[0-9]{3,5}/;let string = '12abc';アンダースコアと英数字にマッチするか\\wアンダースコアと英数字にマッチするか．[A-Za-z0-9_] と同じマッチする// アンダースコアと英数字にマッチするかlet pattern = /\\w/;let string = '12a_Abc';マッチしない// アンダースコアと英数字にマッチするかlet pattern = /\\w/;let string = '$';文字以外にマッチするか\\W文字以外にマッチするか．[^\\w]と同じ[^A-Za-z0-9_]マッチする// 文字以外にマッチするかlet pattern = /\\W/;let string = '&%#';マッチしないlet pattern = /\\W/;let string = '12a_Abc';数字にマッチするか\\d数字にマッチするか．[0-9] と同じマッチする// 数字にマッチするかlet pattern = /\\d/;let string = '3';// 3桁の数字かlet pattern = /\\d{3}/;let string = '123';マッチしない// 数字にマッチするかlet pattern = /\\d/;let string = 'abc';数字以外にマッチするか\\D数字にマッチするか．[0-9] と同じマッチする// 数字以外にマッチするかlet pattern = /\\D/;let string = 'abc';マッチしない// 数字以外にマッチするかlet pattern = /\\D/;let string = '3';主なオプションフラグオプションありの正規表現は下記のようなパターンからなるlet pattern = /正規表現/オプション;グローバルリサーチgグローバルリサーチ．文字列全体に対してマッチするか (指定なしの場合は1度マッチングした時点で処理を終了)．let pattern = /[A-D]/g;let string = 'ABCDEFGHI';大文字と小文字を区別しないi大文字と小文字を区別しない (指定なしの場合は区別する)．マッチするlet pattern = /[a-d]/i;let string = 'ABCDEFGHI';マッチしないlet pattern = /[a-d]/;let string = 'ABCDEFGHI';Unicode対応uUnicode対応 (漢字などを認識してくれるようになる)．マッチするlet pattern = /[赤青]色/u;let string = '赤色';マッチしないlet pattern = /[赤青]色/u;let string = '黄色';参考資料正規表現一覧正規表現 - JavaScript | MDN【JavaScript入門】4つのパターンで理解する正規表現の使い方まとめ！ | 侍エンジニア塾ブログ（Samurai Blog） - プログラミング入門者向けサイトJavaScript 正規表現まとめ - Qiita【JavaScript】正規表現で文字列を検索する – 株式会社ライトコードPHP正規表現 - 坂本研のゼミ室正規表現サンプル集","link":"https://takashinoda.hatenablog.com/entry/2020/03/04/223358","isoDate":"2020-03-04T13:33:58.000Z","dateMiliSeconds":1583328838000},{"title":"webpackの devtool ソースマップでエラーを確認する","contentSnippet":"最近，webpackをさわっていてソースマップが便利だと思い，紹介させていただきます．webpackソースマップ環境やってみるファイル構成任意のフォルダを作成package.jsonを作成webpackをインストールpackage.jsonを修正app.jsmessage.jswebpack.config.jsindex.htmlbundle.jsブラウザで確認する参考webpackモジュール(JavaScriptなどのファイル)をバンドルする(まとめる)やつ以下の記事に詳しく書いてありました．qiita.comソースマップバンドル後のファイルと前のファイルを関連づけるバンドル前のコードを確認できるので，デバックがしやすいという利点がある今回は，devtoolのプロパティにcheap-module-eval-source-mapを指定するが，他にも種類があるので詳しくは以下を参照webpack.js.org環境以下の環境で動作を確認しています．$ node -vv11.10.1やってみるファイル構成ファイル構成は以下の通りです．$ tree│       ├── package-lock.json├── package.json├── public│   ├── index.html│   └── js│       └── bundle.js├── src│   └── js│       ├── app.js│       └── modules│           └── message.js└── webpack.config.js任意のフォルダを作成mkdir webpack-devtoolpackage.jsonを作成npm init -ywebpackをインストールnpm install --save-dev webpack webpack-clipackage.jsonを修正package.jsonを以下のように修正する．{  \"name\": \"webpack-devtool\",  \"scripts\": {    \"build\": \"webpack\"  },  \"devDependencies\": {    \"webpack\": \"^4.41.6\",    \"webpack-cli\": \"^3.3.11\"  }}app.jsmessage.jsを読み込んで実行するエントリーポイントのsrc / js / app.jsは以下のようするimport message from './modules/message';message('Hello world!!');message.jsconsole.logでログにメッセージを出力するモジュール，タイポしてエラーを出させるようにするexport default function message(msg) {  console.log(mgs);}webpack.config.jswebpackの設定ファイル．プロパティにソースマップを指定するconst path = require('path');module.exports = {  mode: 'development',  entry: './src/js/app.js',  output: {    filename: 'bundle.js',    path: path.resolve(__dirname, 'public/js')  },  // ソースマップの設定  devtool: 'cheap-module-eval-source-map'};index.htmlpublic / index.htmlはwebpackを実行して出力させるbundle.jsを読み込むファイル<!DOCTYPE html><html>  <head>    <meta charset=\"utf-8\" />    <title>webpack!</title>  </head>  <body>    <script src=\"js/bundle.js\"></script>  </body></html>bundle.js以下のコマンドを実行してpublic / js / の中にbundle.jsを生成するnpm run buildブラウザで確認するpublic / index.htmlを開いてコンソールを確認するmessage.jsでエラーが発生しているのが確認できるmessage.jsの部分をクリックするとバンドル前のコードをみてエラー部分を確認できるmsgをmgsとタイポしてる!参考以下のサイト，文献を参考にさせていただきましたwebpack 4 入門 - QiitaDevtool | webpackAmazon CAPTCHA","link":"https://takashinoda.hatenablog.com/entry/2020/02/29/202137","isoDate":"2020-02-29T11:21:37.000Z","dateMiliSeconds":1582975297000},{"title":"React + Firebase でGoogleアカウントでのログイン機能を実装する","contentSnippet":"はじめにFirebase Authentication環境準備Firebaseプロジェクトの作成ログイン方法を指定する実装create-react-appファイル構成Firebase SDK snippet取得するApp.jsSignin.jsx実行結果おわりにはじめにFirebaseとReactでの開発で、今回はGoogleアカウントを使ったログイン機能の実装を行っていきます。(ログインだけです。)Firebase Authenticationfirebase.google.com環境以下の環境で動作を確認しています$ node -v v11.10.1\"react\": \"^16.12.0\",\"firebase\": \"^7.8.0\",準備Firebaseプロジェクトの作成Firebaseプロジェクトの作成は以下の記事にありますので、参考にしていただけますと幸いです。takashinoda.hatenablog.comログイン方法を指定するメニューからAuthenticationを選択Authentication画面からログイン方法を選択ログインプロバイダからGoogleを選択ステータスを有効にする実装create-react-appcreate-react-appでReactプロジェクトを作成npx create-react-app auth-demoファイル構成ファイル構成は以下の通りです$ tree│          ├── package-lock.json├── package.json├── .env├── public│   ├── btn_google_signin.png│   ├── favicon.ico│   └──  index.html├── src│   ├── App.css│   ├── App.js│   ├── App.test.js│   ├── components│   │   └── Signin.jsxFirebase SDK snippet取得するFirebaseプロジェクトのSettingsからapiKeyなどを取得package.jsonと同じ階層に.envファイルを作成し、そこに取得したapiKeyなどを記述# FirebaseREACT_APP_FIREBASE_API_KEY=\"×××××××××××××××××××××\" REACT_APP_FIREBASE_AUTH_DOMAIN=\"×××××××.firebaseapp.com\"REACT_APP_FIREBASE_DATABASE_URL=\"https://×××××××.firebaseio.com\"REACT_APP_FIREBASE_PROJECT_ID=\"××××××××××××\"REACT_APP_FIREBASE_STORAGE_BUCKET=\"×××××××××××××××××\"REACT_APP_FIREBASE_MESSAGING_SENDER_ID=\"123456789\"REACT_APP_FIREBASE_APP_ID=\"××××××××××××××××××××××××××××××\"REACT_APP_FIREBASE_MEASUREMENT_ID=\"×××××××××××××\"App.js.envファイルからapiKeyなどを読み込むcreare-react-appで作成したプロジェクトは、process.env.REACT_APP_から始まる変数を読み込みができるようになっていますimport React from 'react';import Signin from './Signin';import './App.css';import firebase from 'firebase/app';import \"firebase/auth\";const firebaseConfig = {    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,    databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,    appId: process.env.REACT_APP_FIREBASE_APP_ID,    measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,}firebase.initializeApp(firebaseConfig);const App = () => {  return (    <div className=\"App\">      <Signin />    </div>  );}export default App;Signin.jsximport React from 'react';import firebase from 'firebase/app';const Signin = () => {    const signInWithGoogle = () => {        // Googleプロバイダオブジェクトのインスタンスを作成        const provider = new firebase.auth.GoogleAuthProvider()        // ポップアップウィンドウでログインを行う場合はsignInWithPopupを呼び出す        firebase.auth().signInWithPopup(provider)        .then(user => {            alert(\"success : \" + user.user.displayName + \"さんでログインしました\");          })          .catch(error => {              alert(error.message);          });    }            return (            <div>                <div className=\"login\">                    <h1>ログイン</h1>                </div>                <div className=\"signin_button\">                    <img src=\"../btn_google_signin.png\" onClick={()=>signInWithGoogle()} alt=\"google signin\"/>                </div>            </div>        );}export default Signin実行結果npm starthttp://localhost:3000 にアクセスするおわりに今回は、React + Firebase でGoogleアカウントでのログイン機能だけを実装しました。次回はルーティングを使って、ログインが成功したらホーム画面に遷移するような機能の実装を行っていきたいと思います。","link":"https://takashinoda.hatenablog.com/entry/2020/02/08/120000","isoDate":"2020-02-08T03:00:00.000Z","dateMiliSeconds":1581130800000},{"title":"ReactでSPA+PWAを作ってみた","contentSnippet":"はじめに作ったもの使ったものSPAPWA環境構築実装PWA化アイコンを設定するルーティング画像の表示現在地からのルートのリンクを作る参考記事はじめにあけましておめでとうございます🎍昨年末熊本で忘年会の幹事をやったのですが、県外から来る土地勘がない人に様々なお知らせをまとめておくシンプルなPWAを作りました。作ったものお店のサイトへのリンクお店へ、現在地からのルートのリンク最寄りホテルのサイトへのリンク最寄り駐車場へ、現在地からのルートのリンクシンプルな機能ですが調べるのは面倒なことをワンタップでできるようにしましたgithub.com使ったものReactreact-router-domMaterial-UIfortawesomeSPASPA(Single Page Application)とは、単一のページ内でコンテンツを切り替えるアーキテクチャの名称です。(参考: SPA(Single Page Application)ってなに？)PWAPWA(Progressive Web Apps)とは、モバイル端末でウェブサイトを表示するときに、まるでネイティブアプリのような動作を可能にする仕組みの事です。(参考:PWA（Progressive Web Apps）とは？メリットと実装事例について | デジ研)環境構築以下のバージョンで動作確認しています$ node -vv11.10.1\"react\": \"^16.12.0\"Reactの環境構築npx create-react-app myapp実装ファイル構成(略)├── public│   ├── favicon.ico│   ├── index.html│   ├── manifest.json│   ├── mogura.png│   ├── robots.txt│   └── top.png├── src│   ├── App.css│   ├── App.test.js│   ├── components│   │   ├── About.jsx│   │   ├── App.js│   │   ├── Home.jsx│   │   ├── Menu.jsx│   │   └── page404.jsx│   ├── index.css│   ├── index.js│   ├── logo.svg│   ├── serviceWorker.js│   └── setupTests.js└── yarn.lockPWA化こちらの記事を参考にさせていただきました(Reactで触るPWA (Progressive Web App) - Qiita)index.jsの修正オフラインでもアプリを起動できるようにindex.js下記のように修正するimport React from 'react';import ReactDOM from 'react-dom';import './index.css';import App from './components/App';import * as serviceWorker from './serviceWorker';ReactDOM.render(<App />, document.getElementById('root'));//unregister() を register()に修正するserviceWorker.register();アイコンを設定するpublicの中にアイコンにしたい画像をいれる (サイズは192×192)画像のサイズ変更はこのサイトを使用しました =>オンラインでJPGを瞬時にサイズ変更publicの中のmanifest.jsonを書き換える{  \"short_name\": \"hoge\",  \"name\": \"hoge\",  \"icons\": [    {      \"src\": \"favicon.ico\",      \"sizes\": \"64x64 32x32 24x24 16x16\",      \"type\": \"image/x-icon\"    },    {      \"src\": \"top.png\",      \"type\": \"image/png\",      \"sizes\": \"192x192\"    }  ],  \"start_url\": \"/\",  \"display\": \"standalone\",  \"theme_color\": \"#c4e4fc\",  \"background_color\": \"#ffffff\"}Safariに対応させる今のままだとSafariからは、アイコン画像が表示されない状態なのでpublicの中にあるindex.htmlに以下を追加することでSafariからでもアイコンが表示されるようにする (参考:初心者がつまづいた、PWAアプリSafari版でホームボタンのアイコンが読み込まれない件 - Qiita)<!DOCTYPE html><html lang=\"en\">  <head>    <!--ここの一行を追加する-->    <link rel=\"apple-touch-icon\" href=\"./top.png\" sizes=\"192x192\"/>(略)できましたルーティングルーティングに関してはこの記事を参考にさせていただきました。react-routerに入門する - Qiitareact-router-domをインストールするnpm install --save react-router-dom現在(2019/12/26)のバージョン\"react-router-dom\": \"^5.1.2\",インポートするimport {BrowserRouter as Router, Link, Route, Switch} from \"react-router-dom\";リンクを設定する<Router>//リンクを<Link to='/'> </Link>で設定する  <ul>    <li><Link to='/'>About</Link></li>    <li><Link to='./About'>About</Link></li>  </ul></Router>遷移先のコンポーネントを設定する<Router>  <ul>    <li><Link to='/'>About</Link></li>    <li><Link to='./About'>About</Link></li>  </ul>  <Switch>  //component={ここに表示させたいコンポーネント}    <Route path='/' exact component={Home}/>    <Route path='/About' exact component={About}/>    <Route exact component={page404}/>  </Switch></Router>Routeは前方一致するものがあれば全てのコンポーネントが表示されるため、一致させたくないものにはexactが必要です。参考記事より画像の表示今回は存在しないパスにアクセスされた時に表示するページ(page404.jsx)にこのもぐらの画像を表示してみます。もぐらはここから => かわいいフリー素材集 いらすとやpublicの中に表示したい画像を入れる画像の表示//<img src=\"srcフォルダまでのパス\" alt=\"\" height=\"\" width=\"\" /> <img src=\"../mogura.png\" alt=\"もぐらの画像\" height=\"280px\" />現在地からのルートのリンクを作るこの機能はGoogle Maps URL を使って作ります。こちらの記事を参考にさせていただきました => (Google Maps URL 「現在地からのルート」のリンクを作る - Qiita)座標を使う場合<a href=https://www.google.com/maps/dir/?api=1&destination=${lat},${lng}>hoge</a>//例えば: 宮崎駅<a href=https://www.google.com/maps/dir/?api=1&destination=${31.915713},${131.432221}>宮崎駅</a>施設名などのキーワードを使う場合<a href= \"https://www.google.com/maps/dir/?api=1&destination=${keyword}\" >hoge</a>//例えば: 宮崎駅<a href= \"https://www.google.com/maps/dir/?api=1&destination=${宮崎駅}\" >宮崎駅</a>参考記事Reactで触るPWA (Progressive Web App) - Qiita初心者がつまづいた、PWAアプリSafari版でホームボタンのアイコンが読み込まれない件 - Qiitareact-routerに入門する - QiitaGoogle Maps URL 「現在地からのルート」のリンクを作る - Qiita","link":"https://takashinoda.hatenablog.com/entry/2020/01/03/000503","isoDate":"2020-01-02T15:05:03.000Z","dateMiliSeconds":1577977503000},{"title":"GatsbyJSで自分のホームページを作る","contentSnippet":"はじめにGatsbyJSやってみるホスティング完成おわりにはじめに自分のホームページや、就職活動などでポートフォリオサイト作りたいなと思った事ありませんか？この記事では、React製の静的サイトジェネレータであるGatsbyJSを紹介させていただき、実際に自分もポートフォリオサイトを新しく作ってみました。GatsbyJSGatsbyJSとは、React製の静的サイトジェネレータです。モダンで高速なサイトを作ることができます。また、静的サイトのリソースのデータ取得にはGraphQLが使われています。Vue.jsが好きな方はVue.jsの静的サイトジェネレーターGridsomeもあります。www.gatsbyjs.orgやってみる以下の環境で動作を確認しています。$ node -vv11.10.1gatsby -vGatsby CLI version: 2.8.19Gatsby version: 2.18.5GatsbyJSのサイトから、「Get Started」 -> 「Quick start」を選択してこのページにいきます指示通りにGatsby CLIをインストールします。npm install -g gatsby-cli次に、新規作業フォルダを作成するのですが、今回はGatsby Startersを使用します。これは開発を迅速に開始することを目的に、様々なデザインのテンプレートを使用できるので好きなものを選んでください。www.gatsbyjs.org選んだstarterをインストールするgatsby new [SITE_DIRECTORY] [URL_OF_STARTER_GIT_REPO]例えば、このstarterを使いたい場合はgatsby new gatsby-starter-resume https://github.com/anubhavsrivastava/gatsby-starter-resumeこれでインストールできました。サーバを起動するGatsbyJSは以下のコマンドを実行しlocaohost:8000で起動できます。cd 作業ディレクトリgatsby developあとは好きなようにコードを書き換えていきます。下記を参考にしました。https://www.gatsbyjs.org/docs/gatsby-link/https://www.gatsbyjs.org/packages/gatsby-image/ビルドするgatsby buildGatsbyは、サイト用に最適化されたプロダクションビルドを実行し、静的HTMLおよびルートごとのJavaScriptコードバンドルを生成します。公式サイトより引用(日本語訳)ホスティング今回ホスティングにはNetlifyを使用しました。www.netlify.comやり方はこちらの記事を参考にさせていただきましたブログを Gatsby + Netlify に移行した | aobako.net完成できました。https://taka621.netlify.com/GitHub - TakaShinoda/portfolio_v2.0おわりにGatsbyJSを使ってポートフォリオサイトを作成しました。今回はstarterを使うことで簡単にできました。また新しく作る際は一からデザインも作っていきたいです。","link":"https://takashinoda.hatenablog.com/entry/2019/12/23/000334","isoDate":"2019-12-22T15:03:34.000Z","dateMiliSeconds":1577027014000},{"title":"Babelをざっくり理解する","contentSnippet":"Babelとはなぜ必要なのかJavaScript EngineECMAScriptBabelの機能Babelを実行するために必要なもの@babel/cli@babel/coreBabel PluginsBabel PresetsBabelの変換には3つの段階ParsingTransformationCode Generatプラグインarrow-functionsblock-scoping参考資料この記事で扱うソースコードはこちらにもあります。github.comBabelとはJavaScriptのコンパイラーで、JavaScriptを下位互換するために使われる。JSX構文やTypeScriptも変換できる。(TypeScriptは一部サポートしていないらしいです。)babeljs.ioなぜ必要なのか使用できるJavaScriptはブラウザによって異なるから。新しいJavaScriptを各ブラウザで使用できるようにするため。JavaScript EngineJavaScriptのコードを実行するコンピュータプログラムの事。新しい機能をブラウザで使用できるかはJavaScript Engine次第。JavaScript Engineはブラウザによって異なる。 ブラウザ  JavaScript Engine   Google Chrome  V8   Mozilla Firefox  SpiderMonkey   Safari   JavaScriptCore    Microsoft Edge   Chakra  *V8に変更予定(2020/1/15)  Internet Explorer   Chakra ブラウザのバージョンによって使用できる機能に差がある。ECMAScriptJavaScriptの言語仕様の事。TC39という専門委員会でECMAScriptを策定してる。ES2015以降は仕様選定のプロセス*1が変更されて、1年に一度のペースでリリースされるようになっている。Babelの機能構文変換ターゲットブラウザにないPolyfillの提供ソースコードの変換Babelを実行するために必要なもの@babel/cli実行コマンドを用意ファイルやディレクトリの判定を行なっており、内部的には@babel/coreに依存@babel/core@babel/parser, @babel/traverse, @babel/generatorなどを使用して設定の読み込みや、コードの変換を行うBabel Pluginsコードに変換を加える(pluginは最後に実際に軽くふれています)Babel Presets独自のBabelのプラグインセット(@babel/preset-env, @babel/preset-react)Don't want to assemble your own set of plugins? No problem! Presets can act as an array of Babel plugins or even a sharable options config.Presets · Babelより引用Babelの変換には3つの段階ParsingソースコードをAST(Abstract Syntax Tree)に変換TransformationASTを変換するBabelのプラグイン(@babel/plugin-transform-arrow-functions)Code GeneratASTをソースコードに変換プラグインbabelはプラグインを用いることで、JavaScriptのコードを変換できます。今回は、プラグインを軽くさわってみました。mkdir mydemocd mydemoarrow-functionsnpm install --save-dev @babel/core @babel/cli @babel/plugin-transform-arrow-functionsアロー関数を書きます。const hoge = () => {};babel.config.jsを作成const plugins = [\"@babel/plugin-transform-arrow-functions\"];module.exports = {plugins};libというディレクトリの中に結果を出します。npx babel index.js --out-dir lib新しく作られたlibディレクトリの中のindex.jsを見てみると、おおー！アロー関数が普通の関数になりました。const hoge = function () {};block-scopingnpm install --save-dev @babel/plugin-transform-block-scoping先ほどのindex.jsにブロックスコープを追加する//arrow-functionsconst hoge = () => {};//block-scoping{    let a = 1;}let a = 1;const plugins = [    \"@babel/plugin-transform-arrow-functions\",    \"@babel/plugin-transform-block-scoping\"];module.exports = {plugins};先ほどと同様にコンパイルするnpx babel index.js --out-dir libvar hoge = function () {}; {  var _a = 1;}var a = 1;参考資料Plugins · Babel現代フロントエンドに欠かせないwebpackとBabelを理解しよう！ (sakito) - builderscon tokyo 2019ECMAScript · JavaScript Primer #jsprimer*1:詳細はここに書かれていますhttps://tc39.es/process-document/","link":"https://takashinoda.hatenablog.com/entry/2019/12/16/014408","isoDate":"2019-12-15T16:44:08.000Z","dateMiliSeconds":1576428248000},{"title":"研究室のお知らせ管理をホワイトボードからWebに移行したいのでβ版作ってみた","contentSnippet":"宮崎大学アドベントカレンダー2019 6日目の記事です。qiita.comはじめに使用技術作ったもの機能環境構築実装ページを作っていくコンポーネントを作っていくレイアウト用のコンポーネントFirebaseにデータを追加・取得・削除するコンポーネントNext.jsでFirebaseの処理を行うおわりにはじめに研究室内のホワイトボードによる情報伝達が難しくなってきたため、研究室のメンバーが連絡事項を投稿・削除できるWeb掲示板(β版)を作成しました。この記事では主に、ページとコンポーネントのソースコードを紹介します。その他のソースコードはこちらにあります。(他機能追加中のため修正するかもしれません🙇‍♂️)github.com以下の環境で動作確認しています。$ node -vv11.10.1使用技術ReactReduxNext.jsFirebase Realtime DatabaseFirebase HostingMaterial-UI作ったもの機能ID, 投稿されたメッセージ内容, 日付(月/日)をFirebase Realtime Databaseに追加Firebase Realtime Databaseから新着10件のデータを取得して表示指定されたIDのメッセージを削除Firebase Authenticationを用いた認証機能などはまだ実装できていません🙇‍♂️関連記事は以下にまとめていますのでご覧いただけましたら幸いです。Firebaseの設定、データの追加・取得・削除takashinoda.hatenablog.comNext.jsでSSRtakashinoda.hatenablog.com環境構築Reactnpm install --save react react-domReduxnpm install --save redux react-redux redux-thunkNext.jsnpm install --save nextFirebasenpm install --save FirebaseMaterial-UInpm install @material-ui/core実装作業ディレクトリ内でpackage.jsonを作成して以下のようにしました。{    \"scripts\": {        \"dev\": \"next\",        \"build\": \"next build\",        \"start\": \"next start\",        \"export\": \"next export\"    }}上の環境構築のコマンド打ってインストールするnext.config.jsを作成して以下のようにしてindex.jsをトップページにする。module.exports = {    exportPathMap: function() {        return {            '/': {page: '/' }        }    } }pagesフォルダ(Next.jsのWebページを配置する場所)を作成する。componentsフォルダ(コンポーネント関係をまとめる場所)作成する。ページを作っていくここからはpagesフォルダ内での作業です。index.jsを作成import Link from 'next/link';  //リンクを表示するために<Link>タグを使用していますimport Layout from '../components/Layout';  //後述するLayoutコンポーネントを読み込んでいます。export default () => (    <Layout header='Whiteboard' title='Home'>        <Link href='./contact_board'>            <a>連絡板 &gt;&gt;</a>        </Link>         {/**今後他のページを増やすときは以下のようにしてください */}        {/**<Link href='./ファイル名'>            ここは<a>以外も使えます        </Link>*/}    </Layout>);連絡事項が表示されるページcontact_board.jsを作成import Link from 'next/link';import Layout from '../components/Layout';import Firelist from '../components/Firelist';import Button from '@material-ui/core/Button';export default () => (    <Layout header='Whiteboard' title='連絡板'>        <Firelist />        <br />        <Link href='/contact_add'>            <Button variant=\"contained\" color=\"primary\">新規投稿</Button>        </Link>        &nbsp;        <Link href='/contact_del'>            <Button variant=\"contained\">投稿削除</Button>        </Link>        <br />        <Link href='/'>            <a>&lt;&lt; 戻る</a>        </Link>    </Layout>)新規投稿するページcontact_add.jsを作成import Link from 'next/link';import Layout from '../components/Layout';import Fireadd from '../components/Fireadd';export default () => (    <Layout header='Whiteboard' title='新規投稿'>        <Fireadd />        <Link href='/contact_board'>            <a>&lt;&lt; 戻る</a>        </Link>    </Layout>);投稿を削除するページcontact_del.jsを作成import Link from 'next/link';import Layout from '../components/Layout';import Firedelete from '../components/Firedelete';import Firelist from '../components/Firelist';export default () => (    <Layout header='Whiteboard' title='投稿削除'>        <Firedelete />        <Firelist />        <Link href='/contact_board'>            <a>&lt;&lt; 戻る</a>        </Link>    </Layout>);_app.jsを作成import App, { Container } from 'next/app';import React from 'react';import withReduxStore from '../lib/redux-store';import { Provider } from 'react-redux';class _App extends App {    render() {        const {            Component,            pageProps,            reduxStore        } = this.props                return (            <Container>                <Provider store={reduxStore}>                    <Component {...pageProps} />                </Provider>            </Container>        );    }}export default withReduxStore(_App)コンポーネントを作っていくここからはomponentsフォルダ内での作業です。レイアウト用のコンポーネント全体のレイアウトを行うLayout.jsxを作成HeaderとFooterを読み込んで、コンテンツは{this.props.children}としています.import React, { Component } from 'react';import Header from './Header';import Footer from './Footer';import style from '../static/Style';class Layout extends Component {    render() {        return (            <div>                {style}                <Header header={this.props.header} title={this.props.title} />                {this.props.children}                <Footer footer=\"Copyright (C) 2019 hoge inc.\" />            </div>        );    }}export default Layout;Header.jsxを作成import React, { Component } from 'react';class Header extends Component {    render() {        return (            <header>                <div>{this.props.header}</div>                <h1>{this.props.title}</h1>            </header>        );    }}export default Header;Footer.jsxを作成import React, { Component } from 'react';class Footer extends Component {    render() {        return (            <footer>                <div>{this.props.footer}</div>            </footer>        );    }}export default Footer;レイアウトコンポーネントができたのでスタイルシートを用意します。一旦components(作業ディレクトリ/components)フォルダから、作業ディレクトリに戻ってstaticフォルダを作成しそこに移動する。((作業ディレクトリ/static)デザインを好きなように記述するStyle.jsを作成する。export default <style>{`body {    margin:10px;    padding:5px;    color:#669;}//以下略`}</style>;Firebaseにデータを追加・取得・削除するコンポーネントcomponents(作業ディレクトリ/components)フォルダに戻ります。取得・追加・削除のソースコードはGitHubにあります。連絡事項を取得するFirelist.jsx{    let db = firebase.database();    let ref = db.ref(\"sample/\");    let self = this;    ref      .orderByKey()      .limitToLast(10)      .on(\"value\", (snapshot) => {        self.setState({          data: snapshot.val()        });      });  }  getTableData() {    let result = [];    if (this.state.data == null || this.state.data.length == 0) {      return [        <tr key=\"0\">          <th>NO DATA</th>        </tr>      ];    }    for (let i in this.state.data) {      result.push(        <tr key={i}>          <th>{this.state.data[i].ID}</th>          <td>{this.state.data[i].message}</td>          <th>{this.state.data[i].date}</th>        </tr>      );    }    return result;  }新規追加するFireadd.jsx    doChangeMsg(e) {        this.setState({            msg_str: e.target.value        })    }    doAction(e) {        this.addFireData();        Router.push('/contact_board');    }    getLastID() {        let db = firebase.database();        let ref = db.ref('sample/');        let self = this;        ref        .orderByKey()        .limitToLast(1)        .on(\"value\", snapshot => {            let res = snapshot.val();            for(let i in res) {                self.setState({                lastID: i                });                return;            }        });    }    addFireData() {        if (this.state.lastID == -1) {            return;        }        let id = this.state.lastID * 1 + 1;        let db = firebase.database();        let date = new Date().toString().slice(4,10); // 日付を取得        let ref = db.ref('/sample/' + id);        ref.set({            ID: id,            message: this.state.msg_str,            date: date        });    }投稿を削除するFiredelete.jsx    doChange(e) {        this.setState({            id_str: e.target.value        })    }    doAction() {        let result = confirm('本当に削除してもよろしいですか？');        if(result) {            this.deleteFireData();        }        Router.push('/contact_board');    }    deleteFireData() {        let id = this.state.id_str;        let db = firebase.database();        let ref = db.ref('sample/' + id);        ref.remove();    }Next.jsでFirebaseの処理を行うfirebaseのオブジェクトは、最初に一度初期化の処理を行わないといけないのですが、Next.jsでは複数のページにアクセスできるので、ファイルによってはスクリプトが複数回実行されてエラーになります。そのため、Reduxを組み込んでストアに共通する値を保管するようにしました。(作業ディレクトリ/store.js)import { createStore, applyMiddleware } from 'redux'import thunkMiddleware from 'redux-thunk'import firebase from \"firebase\";//Firebaseの初期化(自分のFirebaseプロジェクトからコピーしてくる)const firebaseConfig = {  apiKey: \"\",  authDomain: \"\",  databaseURL: \"\",  projectId: \"\",  storageBucket: \"\",  messagingSenderId: \"\",  appId: \"\"};var fireapp;try {  firebase.initializeApp(firebaseConfig);} catch (error) {  console.log(error.message);}export default fireapp;const initial = {}function fireReducer (state = initial, action) {  switch (action.type) {      case 'TESTACTION':        return state;      default:          return state;  }}  export function initStore(state = initial) {  return createStore(fireReducer, state, applyMiddleware(thunkMiddleware))}このstore.jsがどこから読み込まれるかというと、これを作成する必要があります。(作業ディレクトリ/lib/redux-store.js)このredux-store.jsでimportされる時に一度だけスクリプトが読み込まれます。import React, { Component } from 'react';import { initStore } from '../store';const isServer = typeof window === 'undefined'const _NRS_ = '__NEXT_REDUX_STORE__'//ストア作成function getOrCreateStore (initialState) {  if (isServer) {    return initStore(initialState)  }  if (!window[_NRS_]) {    window[_NRS_] = initStore(initialState)  }  return window[_NRS_]}//Appコンポーネントを作成export default (App) => {  return class AppWithRedux extends Component {    static async getInitialProps (appContext) {      const reduxStore = getOrCreateStore()      appContext.ctx.reduxStore = reduxStore      let appProps = {}      if (typeof App.getInitialProps === 'function') {        appProps = await App.getInitialProps(appContext)      }      return {        ...appProps,        initialReduxState: reduxStore.getState()      }    }    constructor (props) {      super(props)      this.reduxStore = getOrCreateStore(props.initialReduxState)    }    render () {      return <App {...this.props}        reduxStore={this.reduxStore} />    }  }}おわりにDatabaseのルールを設定してなかったので、書き換えられ放題な状況でした。また、現在ゴミ捨てなどの何かしらの当番を管理できるような機能を追加中です。","link":"https://takashinoda.hatenablog.com/entry/2019/12/06/001927","isoDate":"2019-12-05T15:19:27.000Z","dateMiliSeconds":1575559167000},{"title":"Adobe XDでUIデザインやってみた","contentSnippet":"宮崎大学アドベントカレンダー2019 5日目の記事ですqiita.comはじめにAdobe XDCocoda!ノンデザイナーズ・デザインブックThemes - iOS - Human Interface Guidelines - Apple DeveloperColorDropおわりにはじめに様々なWebサイトやアプリのUIを見てなんかすごいと思った事ありませんか？私はありました。また、サポーターズCoLobの『エンジニア向け - わかりやすい「デザイン」の話』という勉強会に参加したのもUIデザインに興味を持ったきっかけの一つです。この記事では、私がやった事や参考にさせていただいる本やWebサイトを紹介します。Adobe XDAdobe XDとはAdobe XDは、共同作業を促進するパワフルで使いやすいプラットフォーム。webサイトやモバイルアプリ、音声インターフェイス、ゲームなどのデザイン制作をチーム全体でスムーズにおこなうことができます。公式サイトより引用無料で体験版をインストールできて、チュートリアルである程度の操作を学ぶ事ができます。www.adobe.comCocoda!Cocoda!というWebサイトでは、UIデザインの基礎練習や毎日のお題に取り組んで力をつける事ができます。また、他のユーザの方のデザインを見る事ができたり、デザイナーを募集してる企業と実際に繋がる事もできるようです。私も実際にお題に取り組んでみました！フードデリバリーアプリのリスト画面音楽アプリの再生画面料理アプリの検索画面メッセージアプリのメッセージ画面cocoda-design.comノンデザイナーズ・デザインブックこちらは有名は本です。デザイナーじゃない人のためにデザインの基本となる4つの原則が書かれています。この原則を知ると普段目にするデザインの良い・悪いが言語化できるようになります！www.amazon.co.jpThemes - iOS - Human Interface Guidelines - Apple DeveloperAppleのDeveloperサイトです。文字の大きさは何ポイント以上にするべきか、タップするボタンの要素は何×何ポイントの大きさで作成するべきか、など詳しく書いてありiOSの洗練されたデザインコンセプトを知る事ができます。developer.apple.comColorDrop無料のカラーパレットツールです。ワンクリックでカラーコードをコピーできて使いやすいです。配色デザインに迷ったときはおすすめです。colordrop.ioおわりにデザインってセンスがいるんだろうな〜と思っていましたが、それ以前に、良いと思うデザインはとてもロジカルに作られている事を学びました。","link":"https://takashinoda.hatenablog.com/entry/2019/12/05/000151","isoDate":"2019-12-04T15:01:51.000Z","dateMiliSeconds":1575471711000},{"title":"opencv_traincascadeで分類器作る時に苦しんだ事","contentSnippet":"はじめに解決策参考資料はじめにOpencvのtraincascadeでカスケード分類器を作ろうとやってみた時に、以下のようなエラーがでてきたのでその対応をメモします。PARAMETERS:cascadeDirName: ./cascade/bunrui/vecFileName: ./vec/t_RGB.vecbgFileName: ./neg/nglist.txtnumPos: 40numNeg: 15numStages: 20precalcValBufSize[Mb] : 1024precalcIdxBufSize[Mb] : 1024acceptanceRatioBreakValue : -1stageType: BOOSTfeatureType: HOGsampleWidth: 24sampleHeight: 24boostType: GABminHitRate: 0.995maxFalseAlarmRate: 0.5weightTrimRate: 0.95maxDepth: 1maxWeakCount: 100Number of unique features given windowSize [24,24] : 9===== TRAINING 0-stage =====<BEGINPOS count : consumed   40 : 40Train dataset for temp stage can not be filled. Branch training terminated.Cascade classifier can't be trained. Check the used training parameters.調べると情報が少なく不正解画像の数が足りない改行コードが違うWindowSizeの指定が違うなどあり試してみましたがダメでした。解決策ファイル構成は以下のようになっています。.├── opencv_traincascade├── pos //正解画像ファイル│   ├── pos.png├── vec //正解画像のベクトルファイル│   ├── pos.vec├── neg //不正解画像ファイル│   ├── ng.png //不正解画像を複数枚用意│   ├── nglist.txt├── cascade //分類器用のファイル│   ├── ◯◯◯ //任意のファイル名├── 略解決策としては、nglist.txtにある不正解画像のリストにopencv_traincascadeからのパスを通す事で解決しました。変更前ng1.pngng2.pngng3.pngng4.pngng5.png変更後./neg/ng1.png./neg/ng2.png./neg/ng3.png./neg/ng4.png./neg/ng5.pngリストが多すぎて一つ一つパス通すの大変だ、という方はこちらを使ってみてください。<?php$file = fopen(\"nglist.txt\", \"r\"); if($file){  while ($line = fgets($file)) {    echo \"./neg/\".$line;  }}fclose($file);?>これでopencv_traincascadeを実行する事で、分類器を作成する事ができました。参考資料OpenCVで物体検出器を作成⑥ traincascade【開発会社プロフェッサ】","link":"https://takashinoda.hatenablog.com/entry/2019/12/02/172332","isoDate":"2019-12-02T08:23:32.000Z","dateMiliSeconds":1575275012000},{"title":"create-react-appで作成したReactアプリをテストしてみる","contentSnippet":"はじめにテストって何？JestEnzyme環境構築実際にテストしてみるJestによるテストの書き方メモテスト実行のながれ子コンポーネントの存在を確認setStateで値が更新されているか確認子コンポーネントで受け取ったpropsがレンダリングされているか確認モックを使ったテストアラートのテスト参考資料はじめに宮崎大学 Advent Calendar 2019の記事です。qiita.comソースコードはこちら。github.comテストって何？プログラムの振る舞いを確認し品質を保証する目的で行う。手動はつらいので、『こういう入力があったらこういう動作』をあらかじめ記述しテストフレームワークに任せる事で自動化する。JestFacebookが開発JavaScriptのユニットテストツール__tests__フォルダ内のファイルまたは、ファイル名が◯◯.spec.js, ◯◯.test.jsに対してテストを実行するsrcフォルダのsetupTests.jsから設定を読み込むcreate-react-appにはあらかじめJestが同梱されている日本語ドキュメントもあるので詳しく知りたい人はぜひjestjs.ioEnzymeAirbnbが開発テストユーティリティツールshallow, mount, renderを使ってReactのコンポーネントをレンダリングするairbnb.io環境構築$ node -vv11.10.1新しいReactアプリを作るnpx create-react-app my-app以下のようなファイル構成になっているプロジェクトを実行npm start実際にテストしてみるまずは、App.jsを以下のように書き換えるimport React, { Component } from 'react';import './App.css';class App extends Component {  render() {    return (      <div>        <h1>みやだいもうくん</h1>      </div>    );  }}export default App;次にApp.test.jsを書き換える(.test.jsにテストを記述していく)import React from 'react';import ReactDOM from 'react-dom';import App from './App';test('innerHTMLに含まれているか確認', () => {  const div = document.createElement('div');  ReactDOM.render(<App />, div);  //<App />内のinnerHTMLに「みやだいもうくん」が含まれているかどうかをテストする  //”toContain”は含まれているかどうかをチェックする関数  expect(div.innerHTML).toContain('みやだいもうくん');  ReactDOM.unmountComponentAtNode(div);});テストを実行してみる。npm testこのようになれば成功。テストが通りました。Jestによるテストの書き方メモtest(\"最初のテスト\", () => {    expect(1 + 1).toEqual(2);});/** test(\"テストの名前\", () => {}); * 第1引数: テストにつける名前 * 第2引数: テストに実行して欲しい内容をアロー関数で記述 *  * テスト (test) を宣言 * テストの名前は「最初のテスト」 * 実行してほしい内容は(1 + 1) の結果が、(2) と等しくなること (toEqual) を期待 (expect) します */    テスト実行のながれ子コンポーネントの存在を確認ます、子コンポーネントとしてCount.jsxを作成import React, { Component } from 'react';class Count extends Component {    constructor(props){        super(props);        this.state = {            count: 0        }        this.doAdd = this.doAdd.bind(this);    }    doAdd() {        this.setState({            count: this.state.count +1        });    }    render() {        return (            <div>                <button onClick={this.doAdd}>+1ボタン</button>                <p>{this.state.count}</p>            </div>        );    }}export default Count;次に、enzymeとenzyme-adapter-react-16をインストールnpm install enzyme enzyme-adapter-react-16srcフォルダ内にsetupTests.jsを作成し以下のように記述するimport Enzyme from 'enzyme';import Adapter from 'enzyme-adapter-react-16';Enzyme.configure({ adapter: new Adapter() });App.test.jsにテストを追加するimport React from 'react';import ReactDOM from 'react-dom';import App from './App';import Count from './Count';import { shallow, mount, render } from 'enzyme';it('innerHTMLに含まれているか確認', () => {  const div = document.createElement('div');  ReactDOM.render(<App />, div);  //<App />内のinnerHTMLに「みやだいもうくん」が含まれているかどうかをテストする  //”toContain”は含まれているかどうかをチェックする関数  expect(div.innerHTML).toContain('みやだいもうくん');  ReactDOM.unmountComponentAtNode(div);});test('子コンポーネントが存在するか確認', () => {  /** Appコンポーネントをshallowレンダリング */  const wrapper = shallow(<App />);  /** 各コンポーネントの数を取得し、1であればOK */  expect(wrapper.find(Count).length).toBe(1);});setStateで値が更新されているか確認名前を入力して表示するName.jsxを作成import React, { Component } from 'react';class Name extends Component {    constructor(props){        super(props);        this.state = {        name: 'hoge'        }        this.onChange = this.onChange.bind(this);    }    onChange(e) {        this.setState({            name: e.target.value        });    }    render() {        return (            <div>                <input type='text' onChange={this.onChange} placeholder=\"名前を入力\" />                <p>こんにちは！ {this.state.name}さん</p>            </div>        );    }}export default Name;Name.test.jsを作成して、Name.jsxのテストを記述するimport React from 'react';import Name from './Name';import { shallow } from 'enzyme';test('setStateで<Form>のnameが変更されるかを確かめる', () => {    const wrapper = shallow(<Name />);    /** <Form />のstate.nameが’’ではない。(初期stateは{name: ‘hoge’}) */    expect(wrapper.state().name).not.toEqual('')    /** setStateでnameをみやだいもうくんに更新 */    wrapper.setState({ name: 'みやだいもうくん'});    /** state.nameがみやだいもうくんならOK */    expect(wrapper.state().name).toEqual('みやだいもうくん')});子コンポーネントで受け取ったpropsがレンダリングされているか確認App.jsからpropsを受け取る子コンポーネントとしてMessage.jsxを作成import React, { Component } from 'react';import Count from './Count';import Name from './Name';import Message from './Message';class App extends Component {  render() {    return (      <div>        <h1>みやだいもうくん</h1>        <Count />        <Name />        <Message message = '宮崎へ' />      </div>    );  }}export default App;Message.jsximport React, { Component } from 'react';class Message extends Component {    render() {        return (            <div>                <p>ようこそ! {this.props.message}</p>            </div>        );    }}export default Message;Message.test.jsimport React from 'react';import Message from \"./Message\";import { shallow } from 'enzyme';test('受け取ったpropsの値を表示できているか確認', () => {    /*'佐賀へ'という値をtextに渡して、Messageコンポーネントをshallowレンダリング*/    const wrapper = shallow(<Message message={'佐賀へ'} />);    /** レンダリングされたテキストが'ようこそ! 佐賀へ'であればOK */    expect(wrapper.text()).toBe('ようこそ! 佐賀へ');    /** props.messageの値を'World'に変更 */    wrapper.setProps({ message: 'World' });    /** レンダリングされたテキストが'ようこそ! World'であればOK */    expect(wrapper.text()).toBe('ようこそ! World');});モックを使ったテストモックを使う事で、乱数を使ったテストなどの実際には実行してほしくないテストの際に代わりとなる値を返すことができます。アラートのテスト最後に、アラート表示のテストを行います。import React, { Component } from 'react';class Alert extends Component {    constructor(props){        super(props);        this.state = ({            notification: 'himuka'        });        this.onClick = this.onClick.bind(this);    }    onClick() {        alert(this.state.notification);    }    render() {        return (            <div>                <button onClick={this.onClick}>                    アラート                </button>            </div>        );    }}export default Alert;Alert.jsxのテストを記述するAlert.test.jsを作成import React from 'react';import Alert from './Alert';import { shallow } from 'enzyme';test('アラート表示されているか確認', () => {  /** モック関数を作成 */  window.alert = jest.fn();  const wrapper = shallow(<Alert onClick={window.alert('hogehoge')} />);  /** クリックイベントをシュミレート */  wrapper.simulate('click');  /** モック関数が1回呼び出される */  expect(window.alert.mock.calls.length).toBe(1)  /** toHaveBeenCalledWithは特定のFunctionが特定の引数で呼び出されたかを検証 */  expect(window.alert).toHaveBeenCalledWith('hogehoge');});参考資料Jest + enzymeで行うReactのユニットテスト（単体テスト）について | maesblogJavaScriptでも単体テストを導入しよう！ってかテストって何？Create-React-Appで作ったReact アプリでJest & Enzymeを使ってユニット・テストを試してみるEnzymeでwindow.alertのunit testを実装してみる - QiitaJestでReactのテストをする(2) クリックイベントのテスト - 30歳からのプログラミング","link":"https://takashinoda.hatenablog.com/entry/2019/12/01/002203","isoDate":"2019-11-30T15:22:03.000Z","dateMiliSeconds":1575127323000},{"title":"フロントエンド カンファレンス福岡2019から学んだこと","contentSnippet":"はじめに2019年テーマ登壇資料学びTypeScriptがデファクトスタンダードであると肌で感じることができたフロントエンドの歴史を知ることで今の技術の嬉しみがわかったテストの必要性や書き方・考え方を得ることができたフロントエンドでのセキュリティの必要性を知る事ができたおわりにはじめに11/16(土)に九州産業大学で開催されたフロントエンド カンファレンス福岡2019に参加しました。この記事では、私が得た学びを紹介します。2019年テーマ 新しい視点を見つけよう登壇資料登壇資料まとめを作ってくださっている方のQiitaですqiita.com学び今回得られた学びを全て紹介する事はできませんが、一部個人的にピックアップしたものを紹介させていただきます。TypeScriptがデファクトスタンダードであると肌で感じることができたヤフー株式会社のブースにJavaScript総選挙があり、多くのエンジニア、デザイナーの方々が投票していました。TypeScriptがデファクトスタンダードであることはいろんな記事でなんとなく知ってはいましたが、実際に現場で働かれている方々の投票結果を見ることができたのは学生の自分にとっては新鮮でした。フロントエンドの歴史を知ることで今の技術の嬉しみがわかったVueやReactからフロントエンドの勉強を始めたので、jQueryやってないためそれらの何が嬉しいかわからない事が多々あるのですが、過去の問題をどう解決してきたのか、歴史を知る事で知見を深めることができました。 歴史から学ぶ現代のフロントエンド 登壇者 外松 俊尚さん (サイボウズ株式会社)テストの必要性や書き方・考え方を得ることができたTesting Trophyの考え方や、Cypressについて知ることができました。自分もJestとEnzymeでテストがかけるように勉強中だったので、今回一番見たかったセッションでした。明日からはじめるテストのあるフロントエンド開発登壇者 向井 咲人さん (サイボウズ株式会社)フロントエンドでのセキュリティの必要性を知る事ができたセキュリティはフロント側も無関係ではなく、DOM-based XSSなどに配慮することが必要であること。オリジン間でデータを保護するための様々な仕組みが用意されている事を知ることができました。普段趣味でフロントやっている時は、セキュリティについてあまり考えることがなかったので新しい視点を得ることができました。これからのフロントエンド セキュリティ登壇者 長谷川 陽介さん (株式会社セキュアスカイ・テクノロジー)おわりに今回初めてフロントエンド カンファレンス福岡に参加させていただきました。自分の勉強不足でなかなか理解できない事もありモチベーションが上がるきっかになりました。これは登壇者・スポンサー・スタッフの皆様に支えられたものであり深く感謝いたします。絶対に今回得られた学びを今後に活かしていきます。","link":"https://takashinoda.hatenablog.com/entry/2019/11/17/184632","isoDate":"2019-11-17T09:46:32.000Z","dateMiliSeconds":1573983992000},{"title":"スムーズに環境構築できた記事紹介(Docker + Visual Studio Code + LaTeX)","contentSnippet":"はじめにDockerのインストールdocker-composeのインストールVisual Studio Codeの拡張機能をインストールLaTeX WorkshopRemote - Containersおわりにはじめに企業から読書レポートの課題が出たのをきっかけに、LaTeXは卒論時期にとても動作が遅く苦労した思い出があるのでVisual Studio CodeでLaTexの環境構築を行いました。こちらの記事を参考にさせていただき、Visual Studio Codeの拡張機能のインストール方法を詳しくまとめます。korosuke613.hatenablog.comDockerのインストールこちらからインストールDocker Hubインストールしたらコマンドで試しに動かしてみましたqiita.comdocker-composeのインストールこちらで最新版を確認してインストール(2019/10/28はv1.25.0)Releases · docker/compose · GitHubcurl -L https://github.com/docker/compose/releases/download/1.25.0-rc3/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-composedocker-composeコマンドを実行できるように実行権限を与るchmod +x /usr/local/bin/docker-composeインストールされたか確認docker-compose --version成功docker-compose version 1.25.0-rc3, build c7e82489一連のdocker-composeのインストールはこちらの記事を参考にさせていただきましたqiita.comVisual Studio Codeの拡張機能をインストールLaTeX Workshop LaTeX Workshopは、Visual Studio CodeにLaTeX の統合環境を追加するextensionです。コンパイル設定の使い分け、文書のアウトライン表示、詳しくは(Visual Studio Code/LaTeX - TeX Wiki)Remote - ContainersDockerコンテナ上で動作している開発環境に接続して、コンテナ上でVSCodeを動作させてるかのようになる。おわりに現在自分の環境では、ビルドして生成されたpdfがVisual Studio Code上では表示できません...Missing PDF after updating VSCode. · Issue #1494 · James-Yu/LaTeX-Workshop · GitHub","link":"https://takashinoda.hatenablog.com/entry/2019/10/29/181106","isoDate":"2019-10-29T09:11:06.000Z","dateMiliSeconds":1572340266000},{"title":"npm run buildの実行時にError: Module did not self-registerの対応","contentSnippet":"はじめに対応おわりにはじめにNext.js, Reactで開発しているプロジェクトをビルドした時に下記のようなエラーが出たのでその対応をメモします。> Build error occurredError:Module did not self-register.    at Object.Module._extensions..node (internal/modules/cjs/loader.js:977:18)    at Module.load (internal/modules/cjs/loader.js:790:32)    at Function.Module._load (internal/modules/cjs/loader.js:703:12)    at Module.require (internal/modules/cjs/loader.js:830:19)    at require (internal/modules/cjs/helpers.js:68:18)    at Object.<anonymous> (/Users/shinoda/Desktop/Whiteboard/node_modules/grpc/src/grpc_extension.js:32:13)    at Module._compile (internal/modules/cjs/loader.js:936:30)    at Object.Module._extensions..js (internal/modules/cjs/loader.js:947:10)    at Module.load (internal/modules/cjs/loader.js:790:32)    at Function.Module._load (internal/modules/cjs/loader.js:703:12) {  type: 'Error'}対応下記の記事を参考にさせていただきNode.jsのバージョンを下げることで対応することができました。utano.jp具体的にはv12.11.1 -> v11.10.1に切り替えました。qiita.comおわりにこれでビルドが成功してFirebaseでデプロイすることができました。今後は、CircleCIとFirebaseの連携やPWAにしていきたいと思います。","link":"https://takashinoda.hatenablog.com/entry/2019/10/23/173212","isoDate":"2019-10-23T08:32:12.000Z","dateMiliSeconds":1571819532000},{"title":"ReactでFirebase(Realtime Database)を使う","contentSnippet":"はじめに使ったものFirebaseプロジェクトを作成データベースを構築するデータを取得して表示するデータを追加するデータを削除するはじめに今回は、FirebaseのデータをReactで取得し表示する方法を書きます使ったものReactFirebaseCodeSandbox (詳しくはCodeSandboxが便利！ - 坂本研のゼミ室)Firebaseプロジェクトを作成プロジェクト追加を選択(Web App)プロジェクト名を入力し手順通りに進めていく設定情報を取得するDatabaseを選択する(今回はRealtime Database,テストモードを選択)データベースを構築するプロジェクト名:nullという右側の+ボタンをクリックして図のようなデータベースを構築しましたデータを取得して表示するFirebase APIをインストールするnpm install --save firebaseindex.js (src/index.js)import React from \"react\";import ReactDOM from \"react-dom\";import App from \"./components/App\";ReactDOM.render(<App />, document.getElementById(\"root\"));App.js (src/components/App.js)import React, { Component } from \"react\";import List from \"./List\";import firebase from \"firebase\";// Firebaseの設定//ここに先ほど作成したFirebaseプロジェクトの設定情報をかくconst firebaseConfig = {  apiKey: \"\",  authDomain: \"\",  databaseURL: \"\",  projectId: \"\",  storageBucket: \"\",  messagingSenderId: \"\",  appId: \"\",  measurementId: \"\"};// Firebaseの初期化firebase.initializeApp(firebaseConfig);class App extends Component {  render() {    return (      <div>        <h1>Sample</h1>        <list />      </div>    );  }}export default App;List.js (src/components/List.js)データベースにアクセスしてデータを取得、表示するコンポーネントimport React, { Component } from \"react\";import firebase from \"firebase\";import \"firebase/storage\";class List extends Component {  constructor(props) {    super(props);    this.state = {      data: []    };    this.getFireData();  }  // Firebaseからのデータ取得  getFireData() {    let db = firebase.database();    let ref = db.ref(\"sample/\");    let self = this;    ref      .orderByKey()      .limitToFirst(10)      .on(\"value\", snapshot => {        self.setState({          data: snapshot.val()        });      });  }  // データ表示の生成  getTableData() {    let result = [];    if (this.state.data == null || this.state.data.length == 0) {      return [        <tr key=\"0\">          <th>NO DATA</th>        </tr>      ];    }    for (let i in this.state.data) {      result.push(        <tr key={i}>          <th>{this.state.data[i].ID}</th>          <td>{this.state.data[i].name}</td>          <td>{this.state.data[i].message}</td>        </tr>      );    }    return result;  }  render() {    if (this.state.data.length == 0) {      this.getFireData();    }    return (      <table>        <tbody>{this.getTableData()}</tbody>      </table>    );  }}export default List;database取得let db = firebase.database();参照オブジェクト、引数は取り出すデータのパス(今回はプロジェクト直下のsample)let ref = db.ref(\"sample/\");データの取得処理、この3つのメソッドは連続して呼び出すref //並べ替えメソッド .orderByKey() //フィルターメソッド .limitToFirst(10) .on(.....略.....);並べ替え、フィルターメソッドは他にもある並べ替えメソッド    　    orderByKey    キー(項目名)によって並べ替える    orderByValue    値によって並べ替える    orderByChild    引数に指定した子ノードの値によって並べ替える    フィルターメソッド    　    equalTo    引数の値と等しいものを取り出す    limitToFirst    最初から引数で指定した数だけ取り出す    limitToLast    最後から引数で指定した数だけ取り出す    startAt    引数で指定した値のデータから取り出す    endAt    引数で指定した値のデータまでを取り出す    onの処理.on(\"value\", snapshot => {  self.setState({    data: snapshot.val()  });});第1引数 : 処理を割り当てるイベント名実行結果データを追加するデータのパスを取得して値をセットするコンポーネントAdd.js (src/components/Add.js)import React, { Component } from \"react\";import firebase from \"firebase\";import \"firebase/storage\";class Add extends Component {  constructor(props) {    super(props);    this.state = {      name_str: \"\",      msg_str: \"\",      lastID: -1,      data: []    };    this.getLastID();    this.doChangeName = this.doChangeName.bind(this);    this.doChangeMsg = this.doChangeMsg.bind(this);    this.doAction = this.doAction.bind(this);  }  doChangeName(e) {    this.setState({      name_str: e.target.value    });  }  doChangeMsg(e) {    this.setState({      msg_str: e.target.value    });  }  doAction(e) {    this.addFireData();  }  getLastID() {    let db = firebase.database();    let ref = db.ref(\"sample/\");    let self = this;    ref      .orderByKey()      .limitToLast(1)      .on(\"value\", snapshot => {        let res = snapshot.val();        for (let i in res) {          self.setState({            lastID: i          });          return;        }      });  }  addFireData() {    if (this.state.lastID == -1) {      return;    }    let id = this.state.lastID * 1 + 1;    let db = firebase.database();    let ref = db.ref(\"/sample/\" + id);    ref.set({      ID: id,      message: this.state.msg_str,      name: this.state.name_str    });  }  render() {    if (this.state.lastID == -1) {      this.getLastID();    }    return (      <div>        <input          type=\"text\"          placeholder=\"your name.\"          onChange={this.doChangeName}          value={this.state.name_str}        />        <input          type=\"text\"          placeholder=\"type message\"          onChange={this.doChangeMsg}          value={this.state.msg_str}        />        <button onClick={this.doAction}>Add</button>      </div>    );  }}export default Add;    データを削除する削除したい項目のパスを指定してremove()を使って削除するimport React, { Component } from \"react\";import firebase from \"firebase\";import \"firebase/storage\";class Delete extends Component {  constructor(props) {    super(props);    this.state = {      id_str: \"\"    };    this.doChange = this.doChange.bind(this);    this.doAction = this.doAction.bind(this);  }  doChange(e) {    this.setState({      id_str: e.target.value    });  }  doAction(e) {    this.deleteFireData();  }  deleteFireData() {    let id = this.state.id_str;    let db = firebase.database();    let ref = db.ref(\"sample/\" + id);    ref.remove();  }  render() {    return (      <div>        <input          type=\"text\"          placeholder=\"delete ID:\"          onChange={this.doChange}          value={this.state.id_str}        />        <button onClick={this.doAction}>Delete</button>      </div>    );  }}export default Delete;","link":"https://takashinoda.hatenablog.com/entry/2019/10/18/175126","isoDate":"2019-10-18T08:51:26.000Z","dateMiliSeconds":1571388686000},{"title":"Next.jsでSSR","contentSnippet":"Next.jsサーバサイドレンダリングクライアントサイドレンダリングプロジェクト作成コンポーネントを利用するNext.jsNext.jsはReactをサーバサイドでレンダリングし表示する。nextjs.orgサーバサイドレンダリングサーバ側で表示内容を生成してから送信する。クライアントサイドレンダリングスクリプトを受け取ってからレンダリングする。プロジェクト作成ディレクトリ内で package.jsonを作成し下記を記述する{    \"scripts\": {        \"dev\": \"next\",        \"build\": \"next build\",        \"start\": \"next start\",        \"export\": \"next export\"    }}インストールするnpm install --save nextnext.config.jsを作成し下記を記述する exportPathMapで出力するページのマッピングを行う (pagesのindex.jsをトップページに設定)module.exports = {    exportPathMap: function () {        return {            '/': { page: '/'}        }    }}さらにpagesというディレクトリを作成し、その中にindex.jsとother.jsを作成する index.jsimport Link from \"next/link\";export default () => (  <div>    <h1>Welcome to index</h1>    <p>Hello index</p>    <Link href=\"/other\">      <button>go to Other</button>    </Link>  </div>);other.jsimport Link from \"next/link\";export default () => (  <div>    <h1>Other</h1>    <p>Hello Other</p>    <Link href=\"/\">      <button>go to index</button>    </Link>  </div>);プロジェクトの実行npm run devビルドnpm run buildエクスポートnpm run exportコンポーネントを利用するNext.jsでコンポーネントを利用する際は、下記のようにインポートすることで利用できます。hoge.jsを作成import Link from \"next/link\";import Hoge from '../components/hoge'export default () => (  <div>    <h1>Welcome to index</h1>    <p>Hello index</p>    <Hoge />    <Link href=\"/other\">      <button>go to Other</button>    </Link>  </div>);","link":"https://takashinoda.hatenablog.com/entry/2019/10/09/204051","isoDate":"2019-10-09T11:40:51.000Z","dateMiliSeconds":1570621251000},{"title":"Redux Persistでデータを永続化する","contentSnippet":"はじめにRedux PersistインストールRedux Persistを実装するindex.js使用オブジェクトのインポートRedux Persistの設定persistReducerの作成store, persistorの作成PersistGateApp.jsMessage.jsButton.jsはじめにReact Reduxを使ってみる - BLOGで、クリック数をカウントするアプリを作りました。Redux PersistReduxのストアのデータをローカルストレージに保存する。※ローカルストレージインストールnpm install --save redux-persistRedux Persistを実装するRedux Persistでは、通常のReducerとstoreに永続化のためのメッセージとカウントを表示するクリック時はカウントを+1して\"INCREMENT\"と表示するshuft+クリックでカウントを0にリセットして\"RESET\"と表示するindex.jsimport React from \"react\";import ReactDOM from \"react-dom\";import { createStore } from \"redux\";import { Provider } from \"react-redux\";import { persistStore, persistReducer } from \"redux-persist\";import storage from \"redux-persist/lib/storage\";import { PersistGate } from \"redux-persist/integration/react\";import App from \"./components/App\";// ステートの値let state_value = {  counter: 0,  message: \"COUNTER\"};// レデューサーfunction countReducer(state = state_value, action) {  switch (action.type) {    case \"INCREMENT\":      return {        counter: state.counter + 1,        message: \"INCREMENT\"      };    case \"RESET\":      return {        counter: 0,        message: \"RESET\"      };    default:      return state;  }}// Redux Persistの設定const config = {  key: \"root\",  storage: storage};// パーシストレデューサーの作成const persistedReducer = persistReducer(config, countReducer);// ストア、パーシスターの作成let store = createStore(persistedReducer);let persistor = persistStore(store);// 表示をレンダリングReactDOM.render(  <Provider store={store}>    <PersistGate loading={<p>now loading...</p>} persistor={persistor}>      <App />    </PersistGate>  </Provider>,  document.getElementById(\"root\"));    使用オブジェクトのインポートimport { persistStore, persistReducer } from \"redux-persist\";import storage from \"redux-persist/lib/storage\";import { PersistGate } from \"redux-persist/integration/react\";    Redux Persistの設定Redux Persistの設定情報を値として用意する。const config = {  key: \"root\",  storage: storage};    persistReducerの作成引数に先ほど設定した値と使用するReducerを指定してconst persistedReducer = persistReducer(config, countReducer);    store, persistorの作成まず通常のstoreをpersistedReducerを引数にして作成しlet store = createStore(persistedReducer);let persistor = persistStore(store);    PersistGateデータの読み書きが完了してからコンポーネント類を表示するように調整コンポーネントをラップして使用する。コンポーネントの中にPersistGateを用意するReactDOM.render(  <Provider store={store}>    <PersistGate loading={<p>now loading...</p>} persistor={persistor}>      <App />    </PersistGate>  </Provider>,  document.getElementById(\"root\"));    App.jsimport React from \"react\";import { connect } from \"react-redux\";import Message from \"./Message\";import Button from \"./Button\";class App extends React.Component {  render() {    return (      <div>        <h1>Redux Persist</h1>        <Message />        <Button />      </div>    );  }}export default connect()(App);    Message.jsimport React from \"react\";import { connect } from \"react-redux\";class Message extends React.Component {  render() {    return (      <p>        {this.props.message}: {this.props.counter}      </p>    );  }}export default connect(state => state)(Message);    Button.jsimport React from \"react\";import { connect } from \"react-redux\";class Button extends React.Component {  constructor(props) {    super(props);    this.doAction = this.doAction.bind(this);  }  doAction(e) {    if (e.shiftKey) {      this.props.dispatch({ type: \"RESET\" });    } else {      this.props.dispatch({ type: \"INCREMENT\" });    }  }  render() {    return (      <button onClick={this.doAction}>        click      </button>    );  }}export default connect()(Button);","link":"https://takashinoda.hatenablog.com/entry/2019/10/02/191939","isoDate":"2019-10-02T10:19:39.000Z","dateMiliSeconds":1570011579000},{"title":"CodeSandboxが便利！","contentSnippet":"はじめに前回の記事(React Reduxを使ってみる - 坂本研のゼミ室)でCodeSandboxとはオープンソースのオンラインエディタです。フレームワークに対応しています。GitHubとの連携が可能であったり、npmインストール、コードのシェアも容易にできる仕組みになっています。codesandbox.ioちょっとした事ならこっちがいいかもですね。次回は、これを使ってRedux Persistをやっていきたいと思います。","link":"https://takashinoda.hatenablog.com/entry/2019/09/29/221606","isoDate":"2019-09-29T13:16:06.000Z","dateMiliSeconds":1569762966000},{"title":"React Reduxを使ってみる","contentSnippet":"Reduxとは特徴インストールReduxのインストールReact ReduxのインストールReduxで用意するものStoreProviderReducer実際に使っていくcreate-react-appコマンドで雛形を作るサーバーを起動するディレクトリ構造index.jsStore.jsstateの用意Reducerの作成Storeの作成App.jsStoreのconnectMessage.jsStoreのconnectButton.jsdispatch最後にReduxとはReduxとは状態管理をするライブラリコンポーネントの状態が個別で扱われるが、それらを統合して管理する機能を提供している特徴すべてのデータはアプリケーションごとに1つだけ用意されるStoreに保管されるStoreの値は読み取り専用で、直接書き換えは許可されていないStoreの値を変更するにはReducerを使うインストールReduxのインストールnpm install --save reduxReact Reduxのインストールnpm install --save react-reduxReduxで用意するものStoreデータを保管し管理するProviderStoreを他のコンポーネントに受け渡すReducerStoreに保管されるstateを変更する実際に使っていく今回はボタンを押すと数字が1ずつ増えていくものを作っていくcreate-react-appコマンドで雛形を作るcreate-react-app ディレクトリ名create-react-appコマンドをインストールしてない場合は下記のコマンドでインストールするnpm install -g create-react-appサーバーを起動するnpm startまたはyarn startディレクトリ構造ディレクトリ構造は下記のように編集しました│├── src│   ├── .DS_Store│   ├── App.css│   ├── App.test.js│   ├── components│   │   ├── App.js│   │   ├── Button.js│   │   ├── Message.js│   │   └── Store.js│   ├── index.css│   ├── index.js│   └── serviceWorker.jsindex.jsindex.jsを下記のように下記のように書き換えるimport React from 'react';import ReactDOM from 'react-dom';import { Provider } from 'react-redux';import './index.css';import App from './components/App';import countStore from './components/Store'import * as serviceWorker from './serviceWorker';ReactDOM.render(    <Provider store={countStore}>        <App />    </Provider>,    document.getElementById('root'));serviceWorker.unregister();Providerタグの中にコンポーネントを記述するとことで、コンポーネントでストアに保管されている値や処理が使えるようになるStore.jsここにストアを記述していくimport { createStore } from 'redux';//ステートconst state_value = {    count: 0,};// レデューサーfunction countReducer(state = state_value, action) {    switch (action.type) {        case 'INCREMENT':        return {            count:state.count + 1,        };        default:        return state;    }}//createStoreでストアを作成しエクスポートexport default createStore(countReducer);    stateの用意ストアに保管するステートの値を用意する//ステートの用意const state_value = {    count: 0,};    Reducerの作成function 関数名(state = 先ほど作成したstate名, action)// レデューサーの作成function countReducer(state = state_value, action) {    switch (action.type) {　　//typeがINCREMENTだった場合の処理        case 'INCREMENT':        return {            count:state.count + 1,        };        default:        return state;    }}Reducerは条件分岐Storeの作成createStoreという関数で作成するexport default createStore(countReducer);    App.jsimport React from 'react';import { connect } from 'react-redux';import '../App.css';import Message from './Message';import Button from './Button';class App extends React.Component {  render() {    return (      <div>        <h1>Redux</h1>        <Message />        <Button />      </div>    );  }}export default connect()(App);    StoreのconnectApp, Message, Buttonの3つのComponentに記述しているコンポーネントを用意export default connect()(App);App.jsではStoreの値は利用しないので,Message.jsimport React from 'react';import { connect } from 'react-redux';import '../App.css';// カウント表示のコンポーネントclass Message extends React.Component {    render(){      return (        <p>          {this.props.count}        </p>      );    }  }  // ストアのコネクト  export default connect((state)=>state)(Message);    Storeのconnect1つ目の()の引数でstateをそのまま返すアロー関数を指定してコンポーネントにコネクトし、それをそのままexport defaultすることで  export default connect((state)=>state)(Message);    Button.jsimport React from 'react';import { connect } from 'react-redux';import '../App.css';class Button extends React.Component {    constructor(props){      super(props);      this.doAction = this.doAction.bind(this);    }      // ボタンクリックでディスパッチを実行    doAction(e){        this.props.dispatch({ type:'INCREMENT' });    }      render(){      return (        <button onClick={this.doAction}>          click        </button>      );    }}  // ストアのコネクトexport default connect()(Button);    dispatchdispatchはReduxにactionを送る働きをするthis.props.dispatch({ type:'INCREMENT' });    最後に今回のソースコードはこちらにもありますGitHub - TakaShinoda/CountUP","link":"https://takashinoda.hatenablog.com/entry/2019/09/19/161427","isoDate":"2019-09-19T07:14:27.000Z","dateMiliSeconds":1568877267000},{"title":"LogRocket使ってユーザの行動分析やってみた","contentSnippet":"LogRocket使い方最後にLogRocketJavaScriptコードでユーザの行動分析を動画で確認できるサービスlogrocket.com使い方公式サイトにアクセスしてトップページからユーザ登録するプロジェクト名を入力するタグが表示されるのでコピーするWebサイト(今回は自分のポートフォリオサイトにしました)のHTMLのheadタグ内にペーストTakaShinoda portfolioLogRocketの作成したプロジェクトを開くと管理画面が表示され、再生ボタンを押すと、自分のWebサイトに訪れたユーザがどのような行動をしたのか動画で確認できる最後にLogRocketで、サイトへの訪問数、日付、IPアドレス、PC・スマホ、国などとても細かく把握できる。また、エラーログも記録されているのでどういう時にどんなエラーが出ているのかチェックできて便利！","link":"https://takashinoda.hatenablog.com/entry/2019/08/22/224017","isoDate":"2019-08-22T13:40:17.000Z","dateMiliSeconds":1566481217000},{"title":"PHP正規表現","contentSnippet":"正規表現とはpreg_match()車のナンバー「35-10」が含まれているか調べる任意の１文字を含むパターン任意の１文字が指定範囲のある場合文字クラス定義の中で使うメタ文字定義済みの文字クラス先頭一致と終端一致選択肢繰り返しサブパターンで電話番号を検索する文字クラス定義[]の外で使うメタ文字preg_quote()正規表現とは正規表現とは文字列をパターンで検索して、そのパターンにマッチするかチェック・置換・分割preg_match()パターンマッチで利用する関数$result = preg_match($pattern, $subject)    車のナンバー「35-10」が含まれているか調べる調べるナンバー「35-10」を/35-10/のように/で囲んでパターンを作るUTF-8を正しくマッチングするための修飾子<?php$result1 = preg_match(\"/35-10/u\", \"ナンバーは35-10でしたよ\");$result2 = preg_match(\"/35-10/u\", \"ナンバーは42-13でしたよ\");var_dump($result1);var_dump($result2);?>出力int(1)int(0)任意の１文字を含むパターン次に調べるナンバーが「35-?0」のような場合<?php$result1 = preg_match(\"/35-.0/u\", \"ナンバーは35-60でしたよ\");$result2 = preg_match(\"/35-.0/u\", \"ナンバーは36-10でしたよ\");var_dump($result1);var_dump($result2);?>出力int(1)int(0)任意の１文字が指定範囲のある場合調べるナンバーが「35-?0」の?が6~9の数字である事が分かっている場合<?php$result1 = preg_match(\"/35-[6-9]0/u\", \"ナンバーは35-60でしたよ\");$result2 = preg_match(\"/35-[6-9]0/u\", \"ナンバーは35-10でしたよ\");var_dump($result1);var_dump($result2);?>出力int(1)int(0)文字クラス定義の中で使うメタ文字35-[6-9]0ので囲まれた範囲は「文字クラス」と呼ばれるに中で使うメタ文字は下記のものがある\\     エスケープ文字^     否定-     文字範囲の指定<?php//赤色または青色出ないときにマッチする$pattern = \"/[^赤青]色/u\";var_dump(preg_match($pattern, \"赤色\"));var_dump(preg_match($pattern, \"青色\"));var_dump(preg_match($pattern, \"黄色\"));?>出力int(0)int(0)int(1)ハイフンは文字の範囲を指定するので<?php//A1~G9にマッチする$pattern = \"/[A-G][1-9]/u\";var_dump(preg_match($pattern, \"A7\"));var_dump(preg_match($pattern, \"D3\"));var_dump(preg_match($pattern, \"e2\"));var_dump(preg_match($pattern, \"G0\"));var_dump(preg_match($pattern, \"J8\"));?>出力int(1)int(1)int(0)int(0)int(0)定義済みの文字クラス使用頻度が高い文字クラスには、定義済みのものがある文字クラス    意味    \\d    数値 [0-9]と同じ    \\D    数値以外 [^0-9]と同じ    \\s    空白文字 [\\n\\r\\t \\x0B]と同じ    \\S    空白文字以外 [^/s]    \\w    英数文字、アンダースコア [a-zA-Z_0-9]    \\W    文字以外 [^\\w]    先頭一致と終端一致先頭一致は[]の外で^、終端一致は$を使用する事で検索が可能<?php//上から始まる名前にマッチする$pattern = \"/^上/u\";var_dump(preg_match($pattern, \"上田勇気\"));var_dump(preg_match($pattern, \"鈴木雅夫\"));var_dump(preg_match($pattern, \"山田優香\"));?>出力int(1)int(0)int(0)同様に山で始まり子で終わる文字を指定する<?php//山から始まり子で終わる４文字の名前にマッチする$pattern = \"/^山..子/u\";var_dump(preg_match($pattern, \"上田勇気\"));var_dump(preg_match($pattern, \"鈴木雅夫\"));var_dump(preg_match($pattern, \"山田優子\"));?>出力int(0)int(0)int(1)選択肢東京または大阪などのパターンを作りたいときは|で区切る<?php$pattern = \"/東京|大阪/u\";var_dump(preg_match($pattern, \"東京タワー\"));var_dump(preg_match($pattern, \"横浜駅\"));var_dump(preg_match($pattern, \"ホテル大阪\"));?>出力int(1)int(0)int(1)繰り返し5桁の数字を検索するパターンは/[0-9][0-9][0-9][0-9][0-9]/ですが<?php$pattern = \"/[1-9]{3}-[1-9]{4}/u\";var_dump(preg_match($pattern, \"123-4567\"));var_dump(preg_match($pattern, \"12345-67\"));var_dump(preg_match($pattern, \"12-34-56\"));?>出力int(1)int(0)int(0)サブパターンで電話番号を検索する先ほどの選択肢と同様に()で囲む事でサブパターンを作成できる<?php$pattern = \"/(090|080|070)-{0,1}[0-9]{4}-{0,1}[0-9]{4}/u\";var_dump(preg_match($pattern, \"090-1234-5678\"));var_dump(preg_match($pattern, \"07098765432\"));var_dump(preg_match($pattern, \"1234567\"));?>出力int(1)int(1)int(0)さらに短く書く<?php$pattern = \"/(090|080|070)(-?\\d{4}){2}/u\";var_dump(preg_match($pattern, \"090-1234-5678\"));var_dump(preg_match($pattern, \"07098765432\"));var_dump(preg_match($pattern, \"1234567\"));?>出力int(1)int(1)int(0)文字クラス定義[]の外で使うメタ文字メタ文字    説明    \\    エスケープ    ^    先頭一致    $    終端一致    .    任意の１文字(改行除く)    []    文字クラスの定義        選択肢の区切り         ()    サブパターンの区切り    {n}    n回の繰り返し    {n,}    n回以上の繰り返し    {n,m}    n~m回の繰り返し    *    {0,}の省略形    +    {1,}の省略形    ?    {0,1}の省略形    preg_quote()メタ文字をエスケープしたパターンを作る関数正規表現で検索したい文字列にパターンで利用するメタ文字などが含まれている場合エスケープの\\を埋め込んでくれる<?php//URLに含まれているメタ文字をエスケープする//preg_quoteの第２引数に/を指定して/をエスケープする$escaped = preg_quote(\"http://www.sample.com/php/study1/\", \"/\");var_dump($escaped);?>出力string(41) \"http\\:\\/\\/www\\.sample\\.com\\/php\\/study1\\/\"","link":"https://takashinoda.hatenablog.com/entry/2019/08/22/180243","isoDate":"2019-08-22T09:02:43.000Z","dateMiliSeconds":1566464563000},{"title":"MAMPの環境構築","contentSnippet":"MAMPとはMAMPのダウンロードMAMPのインストールMAMPを開くphp.initの設定(タイムゾーンの変更)MAMPのPHPにパスを通すphp.init (設定ファイル)PHPのバージョン確認MySQLの操作MySQLにパスを通すPHPを実行してみるMAMPとはMAMPとは、「Macintosh+Apache+MySQL+PHP」の略PHP環境をボタン一つで起動・終了させることができるMAMPのダウンロード下記のリンクにアクセスして、MAMPのインストーラーをダウンロードするwww.mamp.infoFree DownloadをクリックmacOSをクリックMAMPのインストールダウンロードしたインストーラーを起動し手順にそって続けるをクリックMAMPを開く上部のメニュー「MAMP」-「Preferences」で設定を行うphp.initの設定(タイムゾーンの変更)タイムゾーンを東京に変更phpのバージョンのディレクトリに移動する$ cd /Applications/MAMP/bin/php/php*.*.*/conf/date.timezoneを下記のように変更date.timezone = \"Asia/Tokyo\"MAMPのPHPにパスを通す下記コマンドで.bash_profileがあるか確認$ cd ~$ ls -al.bash_profileにMAMPのPHPの場所を記述export PATH=/Applications/MAMP/bin/php/php7.3.7/bin:$PATH設定を反映$ source ~/.bash_profileパスが通ったか確認$ which phpこのように表示されて入ればOK※パスが通らない場合$ sudo mv /usr/bin/vim /usr/bin/old_vim~/bin以下を変更する方法 [Operation not permittedの解決方法]Macを再起動する立ち上げ時にcommand + Rを長押し「日本語」を選択してください。 上のメニューバーからユーティリティ > ターミナルを起動ターミナルが起動したら下記コードを入力$ csrutil status下記コードで/bin以下を変更できるようにする$ csrutil disable変更した設定にするために下記コードを入力して再起動$ rebootphp.init (設定ファイル)PHPの設定を変更する場合、利用しているPHPのバージョンのphp.iniを編集すればOK/Applications/MAMP/bin/php/php7.3.7/conf/php.iniPHPのバージョン確認MAMPを起動してStart Serversをクリック スタートページの上部メニューから「TOOLS」-「PHPINFO」をクリックPHPのバージョンが確認できるMySQLの操作MAMPを起動して、下記に移動$ cd /Applications/MAMP/Library/bin/mysqlコマンドの実行./mysql -u root -p※パスワードはスタートページのMySQL部分を参照パスワードを入力するとこのように表示されるWelcome to the MySQL monitor.  Commands end with ; or \\g.Your MySQL connection id is 5Server version: 5.7.26 MySQL Community Server (GPL)Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.mysql> MySQLにパスを通すMAMPのPHPにパスを通した時同様に、.bash_profileに下記のコードを追加export PATH=/Applications/MAMP/Library/bin:$PATHターミナルを再起動して、下記を実行しMySQLに接続できれば成功mysql -u root -pPHPを実行してみる下記のようなhello.phpを作成する<?phpecho \"Hello World\\n\";?>実行してみるphp hello.php次にApacheを経由して実行ために、MAMPのhtdocsに移動する$ cd /Applications/MAMP/htdocs下記のようなhello-apache.phpを作成する<?phpecho \"Apache経由でHello World\\n\";?>MAMPを起動し、ブラウザでhttp://localhost/hello-apache.phpへアクセス","link":"https://takashinoda.hatenablog.com/entry/2019/08/16/013126","isoDate":"2019-08-15T16:31:26.000Z","dateMiliSeconds":1565886686000},{"title":"min.t使ってみた","contentSnippet":"min.tmin.t（ミント）は、拡散しないツイートまとめサイトmin.togetter.com実際に使ってみたキーワード(URLも対応)を入れてツイートを検索まとめたいツイートをドラッグして移動タイトル、簡単な説明を入力コメント機能や公開範囲を制限する完成実際はこのように、読みたい記事をざっとまとめて","link":"https://takashinoda.hatenablog.com/entry/2019/08/13/225453","isoDate":"2019-08-13T13:54:53.000Z","dateMiliSeconds":1565704493000}]
